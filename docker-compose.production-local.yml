version: '3.8'

services:
  # PostgreSQL Database - Production-like setup
  postgres:
    image: postgres:15-alpine
    container_name: demohotel_postgres_prod_local
    environment:
      POSTGRES_DB: demovoicehotelsaas_prod_local
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_prod_local_2025
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_prod_local_data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d
    networks:
      - demohotel_prod_local
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d demovoicehotelsaas_prod_local"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Session Storage (Production-like)
  redis:
    image: redis:7-alpine
    container_name: demohotel_redis_prod_local
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_prod_local_data:/data
    networks:
      - demohotel_prod_local
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "redis_prod_local_2025"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Hotel Application - Production Mode
  app:
    build:
      context: .
      dockerfile: Dockerfile.production-local
    container_name: demohotel_app_prod_local
    environment:
      NODE_ENV: production
      PORT: 10000
      DATABASE_URL: postgresql://postgres:postgres_prod_local_2025@postgres:5432/demovoicehotelsaas_prod_local
      REDIS_URL: redis://:redis_prod_local_2025@redis:6379
      # Load other environment variables from .env.production-local
    env_file:
      - .env.production-local
    ports:
      - "10001:10000"  # External port 10001 to avoid conflicts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - demohotel_prod_local
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Nginx Load Balancer (Production-like)
  nginx:
    image: nginx:alpine
    container_name: demohotel_nginx_prod_local
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - demohotel_prod_local
    restart: unless-stopped

volumes:
  postgres_prod_local_data:
    driver: local
  redis_prod_local_data:
    driver: local

networks:
  demohotel_prod_local:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16