# =============================================================================
# Hotel Management SaaS Platform - Development Docker Compose
# Complete development environment with all services and tools
# =============================================================================

version: '3.8'

# ┌─────────────────────────────────────────────────────────────────────────┐
# │ Networks                                                                │
# └─────────────────────────────────────────────────────────────────────────┘

networks:
  hotel-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ┌─────────────────────────────────────────────────────────────────────────┐
# │ Volumes                                                                 │
# └─────────────────────────────────────────────────────────────────────────┘

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  minio_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  logstash_data:
  
# ┌─────────────────────────────────────────────────────────────────────────┐
# │ Services                                                                │
# └─────────────────────────────────────────────────────────────────────────┘

services:
  # ═══════════════════════════════════════════════════════════════════════
  # Application Services
  # ═══════════════════════════════════════════════════════════════════════
  
  # Main Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        BUILD_VERSION: ${BUILD_VERSION:-dev}
    container_name: hotel-app-dev
    restart: unless-stopped
    ports:
      - "3000:3000"   # Backend API
      - "3001:3001"   # Admin Dashboard
      - "5173:5173"   # Frontend Dev Server
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://hotel_user:hotel_password@postgres:5432/hotel_dev
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongo:27017/hotel_dev
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
      - VAPI_PUBLIC_KEY=${VAPI_PUBLIC_KEY:-}
      - VAPI_ASSISTANT_ID=${VAPI_ASSISTANT_ID:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY:-}
      - MAILJET_API_KEY=${MAILJET_API_KEY:-}
      - MAILJET_SECRET_KEY=${MAILJET_SECRET_KEY:-}
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    depends_on:
      - postgres
      - redis
      - mongo
      - minio
    networks:
      - hotel-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ═══════════════════════════════════════════════════════════════════════
  # Database Services
  # ═══════════════════════════════════════════════════════════════════════

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: hotel_dev
      POSTGRES_USER: hotel_user
      POSTGRES_PASSWORD: hotel_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hotel-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotel_user -d hotel_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: hotel-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/docker/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - hotel-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server /etc/redis/redis.conf

  # MongoDB (for analytics and logs)
  mongo:
    image: mongo:6
    container_name: hotel-mongo-dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: hotel_dev
    volumes:
      - mongo_data:/data/db
      - ./scripts/docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - hotel-dev
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ═══════════════════════════════════════════════════════════════════════
  # Storage & File Services
  # ═══════════════════════════════════════════════════════════════════════

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: hotel-minio-dev
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - hotel-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    command: server /data --console-address ":9001"

  # ═══════════════════════════════════════════════════════════════════════
  # Monitoring & Observability Services
  # ═══════════════════════════════════════════════════════════════════════

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./scripts/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - hotel-dev
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hotel-grafana-dev
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/docker/grafana/provisioning:/etc/grafana/provisioning
      - ./scripts/docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - hotel-dev
    depends_on:
      - prometheus

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: hotel-node-exporter-dev
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - hotel-dev
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  # ═══════════════════════════════════════════════════════════════════════
  # Logging & Search Services
  # ═══════════════════════════════════════════════════════════════════════

  # Elasticsearch (Log Storage)
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: hotel-elasticsearch-dev
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hotel-dev

  # Logstash (Log Processing)
  logstash:
    image: logstash:8.8.0
    container_name: hotel-logstash-dev
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    volumes:
      - logstash_data:/usr/share/logstash/data
      - ./scripts/docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/hotel
    networks:
      - hotel-dev
    depends_on:
      - elasticsearch

  # Kibana (Log Visualization)
  kibana:
    image: kibana:8.8.0
    container_name: hotel-kibana-dev
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - hotel-dev
    depends_on:
      - elasticsearch

  # ═══════════════════════════════════════════════════════════════════════
  # Development Tools & Utilities
  # ═══════════════════════════════════════════════════════════════════════

  # Adminer (Database Admin)
  adminer:
    image: adminer:latest
    container_name: hotel-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - hotel-dev
    depends_on:
      - postgres

  # Redis Commander (Redis Admin)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hotel-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - hotel-dev
    depends_on:
      - redis

  # Mongo Express (MongoDB Admin)
  mongo-express:
    image: mongo-express:latest
    container_name: hotel-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongo:27017/
    networks:
      - hotel-dev
    depends_on:
      - mongo

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: hotel-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - hotel-dev

  # ═══════════════════════════════════════════════════════════════════════
  # Nginx Reverse Proxy (Development)
  # ═══════════════════════════════════════════════════════════════════════

  nginx:
    image: nginx:alpine
    container_name: hotel-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./scripts/docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - hotel-dev
    depends_on:
      - app

# =============================================================================
# Usage Instructions:
#
# Start all services:
#   docker-compose up -d
#
# Start specific services:
#   docker-compose up -d app postgres redis
#
# View logs:
#   docker-compose logs -f app
#
# Stop services:
#   docker-compose down
#
# Rebuild and restart:
#   docker-compose down && docker-compose up -d --build
#
# Clean up everything:
#   docker-compose down -v --remove-orphans
#
# Service URLs:
#   - Application: http://localhost:3000
#   - Frontend: http://localhost:5173
#   - Admin: http://localhost:3001
#   - Nginx Proxy: http://localhost
#   - Grafana: http://localhost:3003 (admin/admin123)
#   - Prometheus: http://localhost:9090
#   - Kibana: http://localhost:5601
#   - Adminer: http://localhost:8080
#   - Redis Commander: http://localhost:8081
#   - Mongo Express: http://localhost:8082
#   - MinIO Console: http://localhost:9001 (minioadmin/minioadmin)
#   - MailHog: http://localhost:8025
# ============================================================================= 