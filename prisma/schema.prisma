generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model call {
  id           Int       @id @default(autoincrement())
  tenant_id    String?
  call_id_vapi String?   @unique
  room_number  String?   @db.VarChar(20)
  language     String?   @default("en") @db.VarChar(10)
  service_type String?   @db.VarChar(100)
  duration     Int?
  start_time   DateTime? @default(now()) @db.Timestamp(6)
  end_time     DateTime? @db.Timestamp(6)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  tenants      tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([call_id_vapi])
  @@index([tenant_id])
  @@index([tenant_id], map: "idx_call_tenant_id")
}

model call_summaries {
  id          Int      @id @default(autoincrement())
  call_id     String
  content     String
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  room_number String?
  duration    String?

  @@index([call_id], map: "idx_call_summaries_call_id")
  @@index([timestamp], map: "idx_call_summaries_timestamp")
}

model hotel_profiles {
  id                String    @id
  tenant_id         String?
  hotel_name        String
  description       String?
  address           String?
  phone             String?
  email             String?
  website           String?
  amenities         String?
  policies          String?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  research_data     String?
  assistant_config  String?
  vapi_assistant_id String?
  services_config   String?
  knowledge_base    String?
  system_prompt     String?
  tenants           tenants?  @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model message {
  id         Int      @id @default(autoincrement())
  request_id Int      @default(autoincrement())
  sender     String   @db.VarChar(255)
  content    String
  time       DateTime @default(now()) @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  request    request  @relation(fields: [request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "message_request_id_request_id_fk")
}

model orders {
  id                   Int      @id @default(autoincrement())
  call_id              String
  room_number          String
  order_type           String
  delivery_time        String
  special_instructions String?
  items                Json
  total_amount         Int
  status               String   @default("pending")
  created_at           DateTime @default(now()) @db.Timestamp(6)

  @@index([call_id], map: "idx_orders_call_id")
  @@index([created_at], map: "idx_orders_created_at")
  @@index([status], map: "idx_orders_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model request {
  id                   Int       @id @default(autoincrement())
  room                 String    @db.VarChar(255)
  order_id             String    @db.VarChar(255)
  guest_name           String    @db.VarChar(255)
  content              String
  time                 DateTime  @default(now()) @db.Timestamp(6)
  status               String    @db.VarChar(50)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  call_id              String?   @db.VarChar(255)
  tenant_id            String?   @db.VarChar(255)
  description          String?
  priority             String?   @default("medium") @db.VarChar(50)
  assigned_to          String?   @db.VarChar(255)
  completed_at         DateTime? @db.Timestamp(6)
  metadata             String?
  type                 String?   @default("order") @db.VarChar(50)
  total_amount         Decimal?  @db.Decimal(10, 2)
  items                String?
  delivery_time        DateTime? @db.Timestamp(6)
  special_instructions String?
  order_type           String?   @db.VarChar(100)
  service_id           String?   @db.VarChar(255)
  urgency              String?   @db.VarChar(20)
  message              message[]

  @@index([call_id], map: "idx_request_call_id")
  @@index([status], map: "idx_request_status")
  @@index([tenant_id], map: "idx_request_tenant_id")
  @@index([type], map: "idx_request_type")
  @@index([status])
  @@index([tenant_id])
}

model services {
  id             Int       @id @default(autoincrement())
  tenant_id      String
  name           String    @db.VarChar(100)
  description    String?   @db.VarChar(500)
  price          Float     @db.Real
  currency       String?   @default("VND") @db.VarChar(10)
  category       String    @db.VarChar(50)
  subcategory    String?   @db.VarChar(50)
  is_active      Boolean?  @default(true)
  estimated_time Int?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  tenants        tenants   @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category])
  @@index([is_active])
  @@index([tenant_id])
}

model staff {
  id           Int       @id @default(autoincrement())
  username     String    @unique(map: "staff_username_unique") @db.VarChar(255)
  password     String
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  role         String?   @default("front-desk") @db.VarChar(50)
  tenant_id    String?
  first_name   String?   @db.VarChar(100)
  last_name    String?   @db.VarChar(100)
  email        String?   @db.VarChar(100)
  phone        String?   @db.VarChar(20)
  is_active    Boolean?  @default(true)
  display_name String?   @db.VarChar(255)
  avatar_url   String?
  permissions  String?   @default("[]")
  last_login   DateTime? @db.Timestamp(6)

  @@index([email], map: "idx_staff_email")
  @@index([role], map: "idx_staff_role")
  @@index([tenant_id], map: "idx_staff_tenant_id")
  @@index([username], map: "idx_staff_username")
  @@index([email])
  @@index([tenant_id])
  @@index([username])
}

model tenants {
  id                  String           @id
  hotel_name          String?          @db.VarChar(200)
  subdomain           String           @unique @db.VarChar(50)
  custom_domain       String?          @db.VarChar(100)
  subscription_plan   String?          @default("trial") @db.VarChar(50)
  subscription_status String?          @default("active") @db.VarChar(50)
  trial_ends_at       DateTime?        @db.Timestamp(6)
  created_at          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at          DateTime?        @default(now()) @db.Timestamp(6)
  max_voices          Int?             @default(5)
  max_languages       Int?             @default(4)
  voice_cloning       Boolean?         @default(false)
  multi_location      Boolean?         @default(false)
  white_label         Boolean?         @default(false)
  data_retention_days Int?             @default(90)
  monthly_call_limit  Int?             @default(1000)
  name                String?          @db.VarChar(200)
  is_active           Boolean?         @default(true)
  settings            String?
  tier                String?          @default("free") @db.VarChar(50)
  max_calls           Int?             @default(1000)
  max_users           Int?             @default(10)
  features            String?
  call                call[]
  hotel_profiles      hotel_profiles[]
  services            services[]
}

model transcript {
  id        Int      @id @default(autoincrement())
  call_id   String
  role      String
  content   String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  tenant_id String?  @default("default")

  @@index([call_id], map: "idx_transcript_call_id")
  @@index([timestamp], map: "idx_transcript_timestamp")
  @@index([call_id])
  @@index([tenant_id])
}

model users {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}
