# ============================================================================
# Docker Compose Production Override
# Optimized for production with security, performance, and reliability
# Usage: docker-compose -f docker-compose.yml -f docker-compose.production.yml up
# ============================================================================

version: '3.8'

services:
  # ======================== Production Application ========================
  app:
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - AUTO_MIGRATE=true
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECKS=true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ======================== Production Database ========================
  postgres:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - POSTGRES_DB=hotel_production
      - POSTGRES_USER=hotel_prod_user
      # Password should be set via Docker secrets in real production
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups:ro
      - ./tools/scripts/database/prod-init.sql:/docker-entrypoint-initdb.d/01-prod-init.sql:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_statement=mod
      -c log_destination=stderr
      -c logging_collector=on
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_rotation_age=1d
      -c log_rotation_size=1GB

  # ======================== Production Redis ========================
  redis:
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    volumes:
      - redis_prod_data:/data
      - ./redis.production.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ======================== Production Reverse Proxy ========================
  traefik:
    profiles:
      - "production"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    environment:
      - TRAEFIK_API_DASHBOARD=false
      - TRAEFIK_API_INSECURE=false
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/certs/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
    volumes:
      - ./traefik/traefik.production.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
    command:
      - --api=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json

  # ======================== Production Monitoring ========================
  prometheus:
    profiles:
      - "production"
      - "monitoring"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    volumes:
      - ./monitoring/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    profiles:
      - "production"
      - "monitoring"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/production:/etc/grafana/provisioning:ro

  loki:
    profiles:
      - "production"
      - "monitoring"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    volumes:
      - ./monitoring/loki.production.yml:/etc/loki/local-config.yaml:ro
      - loki_prod_data:/loki

  # ======================== Production Backup Service ========================
  backup:
    image: postgres:15-alpine
    container_name: hotel-backup-service
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./tools/scripts/backup:/scripts:ro
    networks:
      - hotel-network
    profiles:
      - "production"
      - "backup"
    command: |
      sh -c '
        while true; do
          echo "Starting automated backup at $$(date)"
          pg_dump -h postgres -U hotel_prod_user -d hotel_production > /backups/auto-backup-$$(date +%Y%m%d-%H%M%S).sql
          find /backups -name "auto-backup-*.sql" -mtime +7 -delete
          echo "Backup completed at $$(date)"
          sleep 86400
        done
      '

# ======================== Production Volumes ========================
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/hotel-voice-assistant/data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/hotel-voice-assistant/data/redis
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  loki_prod_data:
    driver: local 