/**
 * ðŸ”¥ ENHANCED PRISMA SCHEMA WITH PROPER RELATIONS
 * 
 * This is an enhanced version of the original schema with:
 * - Proper foreign key relationships
 * - Performance optimized indexes
 * - Database-level constraints and validations
 * - Better data integrity enforcement
 * 
 * Note: This is a proposed enhancement. Apply carefully in production.
 */

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENHANCED TENANTS MODEL
// ============================================
model tenants {
  id                  String           @id
  hotel_name          String
  domain              String?
  subdomain           String?          @unique // Added unique constraint
  email               String?          @db.VarChar(255)
  phone               String?          @db.VarChar(50)
  address             String?
  subscription_plan   String?          @default("trial")
  subscription_status String?          @default("active")
  created_at          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at          DateTime?        @default(now()) @db.Timestamp(6)
  custom_domain       String?          @unique // Added unique constraint
  trial_ends_at       DateTime?        @db.Timestamp(6)
  max_voices          Int?             @default(5)
  max_languages       Int?             @default(4)
  voice_cloning       Boolean?         @default(false)
  multi_location      Boolean?         @default(false)
  white_label         Boolean?         @default(false)
  data_retention_days Int?             @default(90)
  monthly_call_limit  Int?             @default(1000)

  // âœ… ENHANCED: Proper Relations
  hotel_profiles      hotel_profiles[]
  requests            request[]
  transcripts         transcript[]
  call_summaries      call_summaries[] // Enhanced relation
  users               users[]          // Enhanced relation
  staff               staff[]          // Enhanced relation

  // âœ… ENHANCED: Performance Indexes
  @@index([subscription_plan], map: "idx_tenants_subscription_plan")
  @@index([subscription_status], map: "idx_tenants_subscription_status")
  @@index([created_at], map: "idx_tenants_created_at")
  @@index([trial_ends_at], map: "idx_tenants_trial_ends_at")
}

// ============================================
// ENHANCED HOTEL PROFILES MODEL
// ============================================
model hotel_profiles {
  id                String    @id
  tenant_id         String
  research_data     String?
  assistant_config  String?
  vapi_assistant_id String?
  services_config   String?
  knowledge_base    String?
  system_prompt     String?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)

  // âœ… ENHANCED: Proper Relations
  tenant            tenants   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tenant_id], map: "idx_hotel_profiles_tenant_id")
}

// ============================================
// ENHANCED REQUEST MODEL WITH RELATIONS
// ============================================
model request {
  id                   Int       @id @default(autoincrement())
  room_number          String?   @db.VarChar(20)
  guest_name           String?   @db.VarChar(100)
  request_content      String?
  status               String?   @db.VarChar(100)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  order_id             String?   @db.VarChar(32)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  tenant_id            String?
  description          String?
  priority             String?   @default("medium")
  assigned_to          String?
  completed_at         DateTime? @db.Timestamp(6)
  metadata             Json?
  type                 String?
  total_amount         Decimal?  @db.Decimal(10, 2)
  items                Json?
  delivery_time        DateTime? @db.Timestamp(6)
  special_instructions String?
  order_type           String?
  call_id              String?   @db.VarChar(255)
  service_id           String?   @db.VarChar(255)
  phone_number         String?   @db.VarChar(50)
  currency             String?   @default("USD") @db.VarChar(10)
  urgency              String?   @default("normal") @db.VarChar(20)

  // âœ… ENHANCED: Proper Relations
  tenant               tenants?  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  assigned_staff       staff?    @relation(fields: [assigned_to], references: [id])

  // âœ… ENHANCED: Performance Indexes
  @@index([call_id], map: "idx_request_call_id")
  @@index([status], map: "idx_request_status")
  @@index([tenant_id], map: "idx_request_tenant_id")
  @@index([type], map: "idx_request_type")
  @@index([priority], map: "idx_request_priority")
  @@index([assigned_to], map: "idx_request_assigned_to")
  @@index([created_at], map: "idx_request_created_at")
  @@index([completed_at], map: "idx_request_completed_at")
  @@index([room_number], map: "idx_request_room_number")
  @@index([status, tenant_id], map: "idx_request_status_tenant") // Composite index
  @@index([created_at, tenant_id], map: "idx_request_created_tenant") // Composite index
}

// ============================================
// ENHANCED TRANSCRIPT MODEL WITH RELATIONS
// ============================================
model transcript {
  id        Int      @id @default(autoincrement())
  call_id   String
  role      String
  content   String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  tenant_id String?  @default("default")

  // âœ… ENHANCED: Proper Relations
  tenant    tenants? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  // âœ… ENHANCED: Performance Indexes
  @@index([call_id], map: "idx_transcript_call_id")
  @@index([tenant_id], map: "idx_transcript_tenant_id")
  @@index([timestamp], map: "idx_transcript_timestamp")
  @@index([role], map: "idx_transcript_role")
  @@index([call_id, tenant_id], map: "idx_transcript_call_tenant") // Composite index
  @@index([timestamp, tenant_id], map: "idx_transcript_time_tenant") // Composite index
}

// ============================================
// ENHANCED CALL SUMMARIES MODEL WITH RELATIONS
// ============================================
model call_summaries {
  id          Int      @id @default(autoincrement())
  call_id     String
  content     String
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  room_number String?
  duration    String?
  tenant_id   String?  // Added tenant_id for multi-tenant support

  // âœ… ENHANCED: Proper Relations
  tenant      tenants? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  // âœ… ENHANCED: Performance Indexes
  @@index([call_id], map: "idx_call_summaries_call_id")
  @@index([timestamp], map: "idx_call_summaries_timestamp")
  @@index([tenant_id], map: "idx_call_summaries_tenant_id")
  @@index([room_number], map: "idx_call_summaries_room_number")
  @@index([timestamp, tenant_id], map: "idx_call_summaries_time_tenant") // Composite index
}

// ============================================
// ENHANCED STAFF MODEL WITH RELATIONS
// ============================================
model staff {
  id         String    @id
  tenant_id  String
  name       String    @db.VarChar(255)
  role       String    @db.VarChar(100)
  email      String?   @db.VarChar(255)
  phone      String?   @db.VarChar(50)
  department String?   @db.VarChar(100)
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  // âœ… ENHANCED: Proper Relations
  tenant     tenants   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  requests   request[] // Staff can be assigned to requests

  // âœ… ENHANCED: Performance Indexes
  @@index([tenant_id], map: "idx_staff_tenant_id")
  @@index([role], map: "idx_staff_role")
  @@index([department], map: "idx_staff_department")
  @@index([is_active], map: "idx_staff_is_active")
  @@index([email], map: "idx_staff_email")
}

// ============================================
// ENHANCED USERS MODEL WITH RELATIONS
// ============================================
model users {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  password_hash   String    @db.VarChar(255)
  role            String?   @default("user") @db.VarChar(50)
  is_active       Boolean?  @default(true)
  last_login      DateTime? @db.Timestamp(6)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  tenant_id       String?   // Added for multi-tenant support

  // âœ… ENHANCED: Proper Relations
  tenant          tenants?  @relation(fields: [tenant_id], references: [id], onDelete: SetNull)

  // âœ… ENHANCED: Performance Indexes
  @@index([tenant_id], map: "idx_users_tenant_id")
  @@index([role], map: "idx_users_role")
  @@index([is_active], map: "idx_users_is_active")
  @@index([last_login], map: "idx_users_last_login")
  @@index([created_at], map: "idx_users_created_at")
}

// ============================================
// OTHER MODELS (keeping original structure)
// ============================================

model orders {
  id                   Int      @id @default(autoincrement())
  call_id              String
  room_number          String
  order_type           String
  delivery_time        String
  special_instructions String?
  items                Json
  total_amount         Int
  status               String   @default("pending")
  created_at           DateTime @default(now()) @db.Timestamp(6)

  @@index([call_id], map: "idx_orders_call_id")
  @@index([status], map: "idx_orders_status")
  @@index([room_number], map: "idx_orders_room_number")
  @@index([created_at], map: "idx_orders_created_at")
}

model platform_tokens {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  platform           String   @db.VarChar(50)
  token_type         String   @db.VarChar(50)
  access_token       String
  refresh_token      String?
  expires_at         DateTime @db.Timestamp(6)
  scope              String?
  token_metadata     Json?
  config             Json
  ai_prompt_template Json?
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)

  @@unique([user_id, platform])
  @@index([platform], map: "idx_platform_tokens_platform")
  @@index([expires_at], map: "idx_platform_tokens_expires_at")
}

model preferences {
  id               Int      @id @default(autoincrement())
  user_id          Int
  preference_key   String   @db.VarChar(255)
  preference_value String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)

  @@unique([user_id, preference_key])
  @@index([user_id], map: "idx_preferences_user_id")
}

// Additional models would continue with similar enhancements...
// For brevity, including key models only

model schedules {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  description    String?
  platform       String    @db.VarChar(50)
  scheduled_time DateTime  @db.Timestamptz(6)
  status         String    @default("pending") @db.VarChar(50)
  video_id       Int?
  user_id        Int?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)

  @@index([platform], map: "idx_schedules_platform")
  @@index([status], map: "idx_schedules_status")
  @@index([scheduled_time], map: "idx_schedules_scheduled_time")
  @@index([user_id], map: "idx_schedules_user_id")
}

model template_standards {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  template Json

  @@index([name], map: "idx_template_standards_name")
}

model templates {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  content Json

  @@index([name], map: "idx_templates_name")
}

model transcripts {
  id        Int      @id @default(autoincrement())
  call_id   String
  role      String
  content   String
  timestamp DateTime @default(now()) @db.Timestamp(6)

  @@index([call_id], map: "idx_transcripts_call_id")
  @@index([timestamp], map: "idx_transcripts_timestamp")
}

// Additional utility models...

model upload_jobs {
  id                   Int       @id @default(autoincrement())
  user_id              Int
  file_path            String    @db.VarChar(500)
  file_name            String    @db.VarChar(255)
  file_size            BigInt
  mime_type            String    @db.VarChar(100)
  status               String    @default("pending") @db.VarChar(50)
  progress_percentage  Int?      @default(0)
  error_message        String?
  upload_url           String?
  thumbnail_url        String?
  metadata             Json?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)
  completed_at         DateTime? @db.Timestamp(6)
  platform_response    Json?
  ai_analysis_status   String?   @default("pending") @db.VarChar(50)
  ai_analysis_result   Json?
  scheduled_publish_at DateTime? @db.Timestamp(6)
  published_at         DateTime? @db.Timestamp(6)

  @@index([user_id], map: "idx_upload_jobs_user_id")
  @@index([status], map: "idx_upload_jobs_status")
  @@index([created_at], map: "idx_upload_jobs_created_at")
}

model user_custom_standards {
  id                Int    @id @default(autoincrement())
  user_id           Int
  template_standard Json
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)

  @@index([user_id], map: "idx_user_custom_standards_user_id")
}

model user_sessions {
  id         Int       @id @default(autoincrement())
  user_id    Int
  session_id String    @unique @db.VarChar(255)
  ip_address String?   @db.VarChar(45)
  user_agent String?
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  is_active  Boolean?  @default(true)

  @@index([user_id], map: "idx_user_sessions_user_id")
  @@index([session_id], map: "idx_user_sessions_session_id")
  @@index([expires_at], map: "idx_user_sessions_expires_at")
  @@index([is_active], map: "idx_user_sessions_is_active")
}

// Continue with other models maintaining similar enhancement patterns...