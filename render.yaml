# ðŸš¨ EMERGENCY RENDER CONFIGURATION - MEMORY OPTIMIZED
services:
  - type: web
    name: DemoHotel19May25
    plan: starter_plus  # ðŸ”¥ UPGRADE: 1GB RAM (vs 512MB starter)
    env: node
    runtime: node
    buildCommand: npm run build:production
    # ðŸš¨ CRITICAL: Node.js memory configuration
    startCommand: node --max-old-space-size=768 --expose-gc --gc-interval=100 apps/server/index.js
    
    # ðŸ”§ Environment variables for memory optimization
    envVars:
      - key: NODE_ENV
        value: production
      - key: NODE_OPTIONS
        value: "--max-old-space-size=768 --expose-gc --gc-interval=100"
      - key: MEMORY_OPTIMIZATION_MODE
        value: "aggressive"
      - key: DATABASE_POOL_MAX
        value: "3"  # Reduce DB connections
      - key: DATABASE_POOL_MIN  
        value: "1"
      - key: DATABASE_POOL_IDLE
        value: "10000"  # Close idle connections after 10s
        
    # ðŸš¨ Health check configuration
    healthCheckPath: /api/health
    
    # ðŸ”§ Auto-deploy settings
    autoDeploy: true
    
    # ðŸš¨ Build settings optimized for memory
    buildFilter:
      paths:
        - apps/**
        - packages/**
        - *.json
        - *.js
        - *.ts
      ignoredPaths:
        - docs/**
        - archive/**
        - tests/**
        - "**/*.test.*"
        - "**/*.spec.*"

# ðŸ”¥ Database configuration (if using Render database)
databases:
  - name: demohotel-db
    plan: starter  # Free tier
    region: oregon
    
# ðŸš¨ CRITICAL NOTES:
# 1. starter_plus provides 1GB RAM vs 512MB starter
# 2. --max-old-space-size=768 reserves 256MB for system
# 3. --expose-gc enables manual garbage collection
# 4. --gc-interval=100 forces GC every 100ms allocation
# 5. Reduced database pool to minimize connection overhead