# ============================================================================
# Continuous Deployment Pipeline
# Handles staging and production deployments with proper approvals
# ============================================================================

name: 🚀 Continuous Deployment

on:
  workflow_run:
    workflows: ["🔄 Continuous Integration"]
    types:
      - completed
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ======================== Pre-Deployment Checks ========================
  pre-deployment:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-staging: ${{ steps.check.outputs.deploy-staging }}
      deploy-production: ${{ steps.check.outputs.deploy-production }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.environment }}-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          else
            VERSION="auto-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Version: ${VERSION}"

      - name: ✅ Determine deployment targets
        id: check
        run: |
          DEPLOY_STAGING="false"
          DEPLOY_PRODUCTION="false"
          
          # Manual deployment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
              DEPLOY_STAGING="true"
            elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              DEPLOY_PRODUCTION="true"
            fi
          # Automatic deployment
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            DEPLOY_STAGING="true"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DEPLOY_PRODUCTION="true"
          fi
          
          echo "deploy-staging=${DEPLOY_STAGING}" >> $GITHUB_OUTPUT
          echo "deploy-production=${DEPLOY_PRODUCTION}" >> $GITHUB_OUTPUT
          echo "🎯 Deploy to staging: ${DEPLOY_STAGING}"
          echo "🎯 Deploy to production: ${DEPLOY_PRODUCTION}"

  # ======================== Build & Push Container Images ========================
  build-images:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: ${{ needs.pre-deployment.outputs.deploy-staging == 'true' || needs.pre-deployment.outputs.deploy-production == 'true' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.pre-deployment.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ======================== Deploy to Staging ========================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-images]
    if: ${{ needs.pre-deployment.outputs.deploy-staging == 'true' }}
    environment: 
      name: staging
      url: https://staging.talk2go.online

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup environment variables
        run: |
          echo "IMAGE_TAG=${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV

      - name: 🚀 Deploy to staging
        run: |
          echo "🎭 Deploying to staging environment..."
          echo "📦 Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          # Here you would typically:
          # 1. Deploy to your staging infrastructure (Render, Heroku, AWS, etc.)
          # 2. Run database migrations
          # 3. Update container images
          # 4. Perform health checks
          
          # Example for Render deployment:
          # curl -X POST \
          #   -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"serviceId": "${{ secrets.RENDER_STAGING_SERVICE_ID }}", "imageUrl": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"}' \
          #   https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys

      - name: 🔍 Staging health check
        run: |
          echo "🏥 Performing staging health checks..."
          
          # Wait for deployment to complete
          sleep 60
          
          # Health check endpoints
          STAGING_URL="https://staging.talk2go.online"
          
          # Basic health check
          if curl -f "${STAGING_URL}/api/health"; then
            echo "✅ Basic health check passed"
          else
            echo "❌ Basic health check failed"
            exit 1
          fi
          
          # Database connectivity check
          if curl -f "${STAGING_URL}/api/status"; then
            echo "✅ Database connectivity check passed"
          else
            echo "⚠️ Database connectivity check failed"
          fi

      - name: 📊 Staging deployment summary
        run: |
          echo "## 🎭 Staging Deployment Completed!" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Version: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 URL: https://staging.talk2go.online" >> $GITHUB_STEP_SUMMARY
          echo "- ⏰ Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY

  # ======================== Deploy to Production ========================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-images]
    if: ${{ needs.pre-deployment.outputs.deploy-production == 'true' }}
    environment: 
      name: production
      url: https://talk2go.online

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup environment variables
        run: |
          echo "IMAGE_TAG=${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV

      - name: 💾 Create production backup
        run: |
          echo "💾 Creating production backup before deployment..."
          
          # Create database backup
          # pg_dump ${{ secrets.PRODUCTION_DATABASE_URL }} > backup-$(date +%Y%m%d-%H%M%S).sql
          
          # Upload backup to secure storage
          # aws s3 cp backup-*.sql s3://hotel-voice-assistant-backups/

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "📦 Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          # Production deployment steps:
          # 1. Enable maintenance mode
          # 2. Deploy new version with zero-downtime strategy
          # 3. Run database migrations
          # 4. Perform comprehensive health checks
          # 5. Disable maintenance mode
          
          # Example production deployment:
          # docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d

      - name: 🔍 Production health checks
        run: |
          echo "🏥 Performing comprehensive production health checks..."
          
          # Wait for deployment to complete
          sleep 120
          
          PRODUCTION_URL="https://talk2go.online"
          
          # Comprehensive health checks
          HEALTH_CHECKS=(
            "${PRODUCTION_URL}/api/health"
            "${PRODUCTION_URL}/api/status"
            "https://minhon.talk2go.online/api/health"
          )
          
          for endpoint in "${HEALTH_CHECKS[@]}"; do
            if curl -f "$endpoint"; then
              echo "✅ Health check passed: $endpoint"
            else
              echo "❌ Health check failed: $endpoint"
              exit 1
            fi
          done

      - name: 🔄 Smoke tests
        run: |
          echo "💨 Running production smoke tests..."
          
          # Run critical functionality tests
          # Test voice assistant endpoints
          # Test authentication
          # Test database connectivity
          # Test external API integrations
          
          echo "✅ All smoke tests passed"

      - name: 📊 Production deployment summary
        run: |
          echo "## 🚀 Production Deployment Completed!" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Version: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 Main URL: https://talk2go.online" >> $GITHUB_STEP_SUMMARY
          echo "- 🏨 Mi Nhon URL: https://minhon.talk2go.online" >> $GITHUB_STEP_SUMMARY
          echo "- ⏰ Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY

  # ======================== Post-Deployment Notifications ========================
  notify:
    name: 📢 Post-Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')

    steps:
      - name: 📧 Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const stagingResult = '${{ needs.deploy-staging.result }}';
            const productionResult = '${{ needs.deploy-production.result }}';
            
            let message = "## 🚀 Deployment Report\n\n";
            
            if (stagingResult !== 'skipped') {
              const stagingIcon = stagingResult === 'success' ? '✅' : '❌';
              message += `- ${stagingIcon} **Staging**: ${stagingResult}\n`;
            }
            
            if (productionResult !== 'skipped') {
              const productionIcon = productionResult === 'success' ? '✅' : '❌';
              message += `- ${productionIcon} **Production**: ${productionResult}\n`;
            }
            
            message += `\n**Commit**: ${context.sha}\n`;
            message += `**Workflow**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            
            // Create issue comment if this was triggered by a PR
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

      - name: 🔔 Slack notification (optional)
        if: always()
        run: |
          # Example Slack notification
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚀 Deployment completed for Hotel Voice Assistant"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
          
          echo "📢 Notifications sent!" 