# ============================================================================
# Continuous Integration Pipeline
# Runs on pull requests and pushes to main branches
# ============================================================================

name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ======================== Code Quality Checks ========================
  quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎨 Run ESLint
        run: npm run lint:check

      - name: 📝 Check TypeScript
        run: npm run typecheck

      - name: 🔍 Run security audit
        run: npm audit --audit-level moderate

      - name: 📊 Check package vulnerabilities
        run: |
          npx npm-check-updates --doctor || true
          npx better-npm-audit audit --level moderate

  # ======================== Unit & Integration Tests ========================
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hotel_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build

      - name: 🧪 Run ${{ matrix.test-type }} tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hotel_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-only
          NODE_ENV: test
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              npm run test:jest:ci
              ;;
            integration)
              npm run test:jest:integration
              ;;
            e2e)
              npm run test:e2e
              ;;
          esac

      - name: 📊 Upload test coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📁 Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
            playwright-report/

  # ======================== Build & Docker Tests ========================
  build:
    name: 🏗️ Build & Container Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.development
          push: false
          tags: hotel-voice-assistant:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: hotel-voice-assistant:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Test Docker container
        run: |
          # Start the container
          docker run -d --name test-container \
            -e NODE_ENV=test \
            -e JWT_SECRET=test-secret \
            -p 10000:10000 \
            hotel-voice-assistant:latest

          # Wait for container to start
          sleep 30

          # Test health endpoint
          curl -f http://localhost:10000/api/health || exit 1

          # Test container logs
          docker logs test-container

          # Cleanup
          docker stop test-container
          docker rm test-container

  # ======================== Security Scanning ========================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🐳 Run Docker image security scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/src \
            aquasec/trivy:latest image hotel-voice-assistant:latest

  # ======================== Performance Tests ========================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hotel_perf_test
          POSTGRES_USER: perf_user
          POSTGRES_PASSWORD: perf_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: ⚡ Run performance tests
        env:
          DATABASE_URL: postgresql://perf_user:perf_password@localhost:5432/hotel_perf_test
          NODE_ENV: test
        run: |
          npm run test:performance
          npm run test:jest:performance

      - name: 📊 Performance report
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('performance-results.json')) {
              const results = JSON.parse(fs.readFileSync('performance-results.json'));
              const comment = `## ⚡ Performance Test Results
              
              | Metric | Value | Status |
              |--------|-------|--------|
              | Avg Response Time | ${results.avgResponseTime}ms | ${results.avgResponseTime < 200 ? '✅' : '⚠️'} |
              | Database Queries | ${results.avgDbQueries} | ${results.avgDbQueries < 10 ? '✅' : '⚠️'} |
              | Memory Usage | ${results.memoryUsage}MB | ${results.memoryUsage < 512 ? '✅' : '⚠️'} |
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # ======================== Deployment Readiness ========================
  deployment-ready:
    name: 🚀 Deployment Ready
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()

    steps:
      - name: ✅ Check deployment readiness
        run: |
          echo "🎯 Checking if deployment is ready..."
          
          # Check if all required jobs passed
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All checks passed - Ready for deployment!"
            echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
          else
            echo "❌ Some checks failed - Not ready for deployment"
            echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: 📝 Deployment summary
        if: success()
        run: |
          echo "## 🎉 CI Pipeline Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker build successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scan clean" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Ready for deployment!" >> $GITHUB_STEP_SUMMARY 