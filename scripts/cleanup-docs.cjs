#!/usr/bin/env node

/**
 * Script d·ªçn d·∫πp v√† t·ªëi ∆∞u h√≥a c·∫•u tr√∫c docs
 * - X√≥a file tr√πng l·∫∑p
 * - ƒê·ªïi t√™n file kh√¥ng r√µ r√†ng
 * - T·∫°o index cho t·ª´ng category
 */

const fs = require('fs');
const path = require('path');

// C·∫•u tr√∫c th∆∞ m·ª•c docs
const DOCS_CATEGORIES = [
    'project-info', 'architecture', 'deployment', 'development',
    'testing', 'troubleshooting', 'api', 'voice-assistant',
    'database', 'security', 'analytics', 'multi-tenant',
    'automation', 'knowledge-base', 'training', 'governance',
    'legacy', 'templates'
];

// T√™n file c·∫ßn ƒë·ªïi t√™n
const FILE_RENAMES = {
    'L·ªñHI_ƒê√É_S·ª¨A.md': 'BUG_FIXES_SUMMARY.md',
    'TR·∫†NG_TH√ÅI_CU·ªêI_C√ôNG.md': 'FINAL_STATUS_REPORT.md',
    'H∆Ø·ªöNG_D·∫™N_C·∫¨P_NH·∫¨T_ENV.md': 'ENV_UPDATE_GUIDE.md',
    'GI·∫¢I_PH√ÅP_HO√ÄN_CH·ªàNH.md': 'COMPLETE_SOLUTION.md',
    'VAPI_LANGUAGE_DEBUGGING.md': 'VAPI_DEBUGGING_GUIDE.md',
    'fix-environment.md': 'ENVIRONMENT_FIX.md',
    'fix-production-now.md': 'PRODUCTION_FIX.md',
    'fix-react-infinite-render.md': 'REACT_INFINITE_RENDER_FIX.md'
};

// X√≥a file tr√πng l·∫∑p
function removeDuplicateFiles() {
    console.log('üßπ D·ªçn d·∫πp file tr√πng l·∫∑p...');

    DOCS_CATEGORIES.forEach(category => {
        const categoryPath = path.join(process.cwd(), 'docs', category);
        if (!fs.existsSync(categoryPath)) return;

        const files = fs.readdirSync(categoryPath).filter(file => file.endsWith('.md'));
        const fileGroups = {};

        // Nh√≥m file theo n·ªôi dung
        files.forEach(file => {
            try {
                const content = fs.readFileSync(path.join(categoryPath, file), 'utf8');
                const hash = content.length + '_' + content.substring(0, 100);

                if (!fileGroups[hash]) {
                    fileGroups[hash] = [];
                }
                fileGroups[hash].push(file);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file ${file}:`, error.message);
            }
        });

        // X√≥a file tr√πng l·∫∑p, gi·ªØ l·∫°i file c√≥ t√™n ng·∫Øn nh·∫•t
        Object.values(fileGroups).forEach(group => {
            if (group.length > 1) {
                group.sort((a, b) => a.length - b.length);
                const keepFile = group[0];
                const deleteFiles = group.slice(1);

                console.log(`üìÅ ${category}: Gi·ªØ ${keepFile}, x√≥a ${deleteFiles.join(', ')}`);

                deleteFiles.forEach(file => {
                    fs.unlinkSync(path.join(categoryPath, file));
                });
            }
        });
    });
}

// ƒê·ªïi t√™n file kh√¥ng r√µ r√†ng
function renameUnclearFiles() {
    console.log('‚úèÔ∏è ƒê·ªïi t√™n file kh√¥ng r√µ r√†ng...');

    DOCS_CATEGORIES.forEach(category => {
        const categoryPath = path.join(process.cwd(), 'docs', category);
        if (!fs.existsSync(categoryPath)) return;

        const files = fs.readdirSync(categoryPath).filter(file => file.endsWith('.md'));

        files.forEach(file => {
            if (FILE_RENAMES[file]) {
                const oldPath = path.join(categoryPath, file);
                const newPath = path.join(categoryPath, FILE_RENAMES[file]);

                if (!fs.existsSync(newPath)) {
                    fs.renameSync(oldPath, newPath);
                    console.log(`‚úÖ ${category}: ${file} ‚Üí ${FILE_RENAMES[file]}`);
                }
            }
        });
    });
}

// T·∫°o index cho t·ª´ng category
function createCategoryIndexes() {
    console.log('üìã T·∫°o index cho t·ª´ng category...');

    DOCS_CATEGORIES.forEach(category => {
        const categoryPath = path.join(process.cwd(), 'docs', category);
        if (!fs.existsSync(categoryPath)) return;

        const files = fs.readdirSync(categoryPath)
            .filter(file => file.endsWith('.md') && file !== 'README.md' && file !== 'INDEX.md');

        if (files.length === 0) return;

        const indexContent = `# üìÅ Index - ${category}

## üìö T√†i li·ªáu trong th∆∞ m·ª•c n√†y

${files.map(file => {
            const name = file.replace('.md', '');
            return `- [${name}](./${file})`;
        }).join('\n')}

## üîç T√¨m ki·∫øm nhanh

\`\`\`bash
# T√¨m ki·∫øm theo t·ª´ kh√≥a
grep -r "keyword" ./docs/${category}/

# T√¨m ki·∫øm file
find ./docs/${category}/ -name "*.md" | grep "keyword"
\`\`\`

## üìä Th·ªëng k√™

- **T·ªïng s·ªë file**: ${files.length}
- **C·∫≠p nh·∫≠t cu·ªëi**: ${new Date().toISOString()}

---

*üìö Index ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script cleanup-docs.cjs*
`;

        const indexPath = path.join(categoryPath, 'INDEX.md');
        fs.writeFileSync(indexPath, indexContent);
        console.log(`‚úÖ T·∫°o index cho ${category}/`);
    });
}

// T·∫°o sitemap t·ªïng th·ªÉ
function createSitemap() {
    console.log('üó∫Ô∏è T·∫°o sitemap t·ªïng th·ªÉ...');

    const sitemapContent = `# üó∫Ô∏è Documentation Sitemap

## üìÅ C·∫•u tr√∫c t·ªïng th·ªÉ

${DOCS_CATEGORIES.map(category => {
        const categoryPath = path.join(process.cwd(), 'docs', category);
        if (!fs.existsSync(categoryPath)) return `### ${category} (0 files)`;

        const files = fs.readdirSync(categoryPath).filter(file => file.endsWith('.md'));
        return `### ${category} (${files.length} files)
- [Index](./${category}/INDEX.md)
- [README](./${category}/README.md)
${files.filter(file => file !== 'README.md' && file !== 'INDEX.md').map(file => `- [${file.replace('.md', '')}](./${category}/${file})`).join('\n')}`;
    }).join('\n\n')}

## üîç T√¨m ki·∫øm to√†n b·ªô

\`\`\`bash
# T√¨m ki·∫øm trong to√†n b·ªô docs
grep -r "keyword" ./docs/

# T√¨m ki·∫øm theo category
grep -r "keyword" ./docs/architecture/
grep -r "keyword" ./docs/deployment/
grep -r "keyword" ./docs/development/
\`\`\`

## üìä Th·ªëng k√™ t·ªïng th·ªÉ

- **T·ªïng s·ªë category**: ${DOCS_CATEGORIES.length}
- **T·ªïng s·ªë file**: ${DOCS_CATEGORIES.reduce((total, category) => {
        const categoryPath = path.join(process.cwd(), 'docs', category);
        if (!fs.existsSync(categoryPath)) return total;
        const files = fs.readdirSync(categoryPath).filter(file => file.endsWith('.md'));
        return total + files.length;
    }, 0)}
- **C·∫≠p nh·∫≠t cu·ªëi**: ${new Date().toISOString()}

---

*üó∫Ô∏è Sitemap ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script cleanup-docs.cjs*
`;

    const sitemapPath = path.join(process.cwd(), 'docs', 'SITEMAP.md');
    fs.writeFileSync(sitemapPath, sitemapContent);
    console.log('‚úÖ T·∫°o sitemap t·ªïng th·ªÉ');
}

// T·∫°o script npm
function createNpmScripts() {
    console.log('üì¶ T·∫°o npm scripts...');

    const packageJsonPath = path.join(process.cwd(), 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package.json');
        return;
    }

    try {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

        if (!packageJson.scripts) {
            packageJson.scripts = {};
        }

        packageJson.scripts['docs:organize'] = 'node scripts/organize-docs.cjs';
        packageJson.scripts['docs:cleanup'] = 'node scripts/cleanup-docs.cjs';
        packageJson.scripts['docs:update'] = 'npm run docs:organize && npm run docs:cleanup';
        packageJson.scripts['docs:validate'] = 'node scripts/validate-docs.cjs';

        fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        console.log('‚úÖ C·∫≠p nh·∫≠t package.json v·ªõi docs scripts');
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t package.json:', error.message);
    }
}

// Main function
function main() {
    console.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp v√† t·ªëi ∆∞u h√≥a docs...\n');

    // 1. X√≥a file tr√πng l·∫∑p
    removeDuplicateFiles();

    // 2. ƒê·ªïi t√™n file kh√¥ng r√µ r√†ng
    renameUnclearFiles();

    // 3. T·∫°o index cho t·ª´ng category
    createCategoryIndexes();

    // 4. T·∫°o sitemap t·ªïng th·ªÉ
    createSitemap();

    // 5. T·∫°o npm scripts
    createNpmScripts();

    console.log('\nüéâ Ho√†n th√†nh d·ªçn d·∫πp v√† t·ªëi ∆∞u h√≥a docs!');
    console.log('üìö Xem k·∫øt qu·∫£ t·∫°i: docs/');
    console.log('üó∫Ô∏è Xem sitemap t·∫°i: docs/SITEMAP.md');
    console.log('üì¶ Ch·∫°y: npm run docs:update');
}

// Ch·∫°y script
if (require.main === module) {
    main();
}

module.exports = { main }; 