#!/usr/bin/env tsx
/**
 * ============================================================================
 * Environment Configuration Manager
 * Manages environment configurations for different deployment environments
 * ============================================================================
 */

import { existsSync, readFileSync, writeFileSync } from 'fs';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const PROJECT_ROOT = join(__dirname, '../../..');

// ======================== Environment Templates ========================

const DEVELOPMENT_TEMPLATE = `# ============================================================================
# Development Environment Configuration
# Auto-generated by environment-manager.ts
# ============================================================================

# Core Settings
NODE_ENV=development
PORT=10000
CLIENT_URL=http://localhost:3000

# Database (SQLite for development)
DATABASE_URL=sqlite:./dev.db

# Authentication (development only)
JWT_SECRET=dev-secret-key-for-local-development-only-32-chars
JWT_REFRESH_SECRET=dev-refresh-secret-for-local-development-only
STAFF_ACCOUNTS=admin:admin123,staff:staff123

# OpenAI (use development keys)
VITE_OPENAI_API_KEY=sk-your-development-openai-key-here
VITE_OPENAI_PROJECT_ID=proj_your-development-project-id

# Vapi Voice Assistant (development)
VITE_VAPI_PUBLIC_KEY=pk_your-development-vapi-public-key
VITE_VAPI_ASSISTANT_ID=asst_your-development-assistant-id
VAPI_API_KEY=your-development-vapi-api-key

# External APIs (development/sandbox)
GOOGLE_PLACES_API_KEY=your-development-google-places-key
GMAIL_APP_PASSWORD=your-test-gmail-password
SUMMARY_EMAILS=test@localhost.com

# Feature Flags
ENABLE_HOTEL_RESEARCH=true
ENABLE_DYNAMIC_ASSISTANT_CREATION=true
ENABLE_MULTI_LANGUAGE_SUPPORT=true
ENABLE_ANALYTICS_DASHBOARD=true
ENABLE_BILLING_SYSTEM=false
ENABLE_DEBUG_MODE=true
ENABLE_BETA_FEATURES=true

# Performance & Security (relaxed for dev)
CORS_ORIGIN=*
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=1000

# Auto-migration
AUTO_MIGRATE=true
AUTO_DB_FIX=true
RUN_SEEDS=true

# Logging & Monitoring
LOG_LEVEL=debug
ENABLE_API_LOGGING=true
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true
`;

const STAGING_TEMPLATE = `# ============================================================================
# Staging Environment Configuration
# Auto-generated by environment-manager.ts
# ============================================================================

# Core Settings
NODE_ENV=staging
PORT=10000
CLIENT_URL=https://staging.talk2go.online

# Database (PostgreSQL)
DATABASE_URL=postgresql://staging_user:CHANGE_ME@staging-db:5432/hotel_staging

# Authentication (staging)
JWT_SECRET=CHANGE_ME_STAGING_JWT_SECRET_32_CHARS_MIN
JWT_REFRESH_SECRET=CHANGE_ME_STAGING_REFRESH_SECRET
STAFF_ACCOUNTS=CHANGE_ME_admin@staging.com:CHANGE_ME_StrongPassword

# OpenAI (staging keys)
VITE_OPENAI_API_KEY=CHANGE_ME_sk-staging-openai-key
VITE_OPENAI_PROJECT_ID=CHANGE_ME_proj_staging-project

# Vapi Voice Assistant (staging)
VITE_VAPI_PUBLIC_KEY=CHANGE_ME_pk_staging-vapi-key
VITE_VAPI_ASSISTANT_ID=CHANGE_ME_asst_staging-assistant
VAPI_API_KEY=CHANGE_ME_staging-vapi-api-key

# Multi-language Vapi Support (staging)
VITE_VAPI_PUBLIC_KEY_VI=CHANGE_ME_pk_staging-vi-key
VITE_VAPI_ASSISTANT_ID_VI=CHANGE_ME_asst_staging-vi
VITE_VAPI_PUBLIC_KEY_FR=CHANGE_ME_pk_staging-fr-key
VITE_VAPI_ASSISTANT_ID_FR=CHANGE_ME_asst_staging-fr

# External APIs (staging)
GOOGLE_PLACES_API_KEY=CHANGE_ME_staging-google-places-key
GMAIL_APP_PASSWORD=CHANGE_ME_staging-gmail-password
SUMMARY_EMAILS=CHANGE_ME_staging@hotel.com

# SaaS Platform
TALK2GO_DOMAIN=staging.talk2go.online
SUBDOMAIN_SUFFIX=.staging.talk2go.online

# Feature Flags
ENABLE_HOTEL_RESEARCH=true
ENABLE_DYNAMIC_ASSISTANT_CREATION=true
ENABLE_MULTI_LANGUAGE_SUPPORT=true
ENABLE_ANALYTICS_DASHBOARD=true
ENABLE_BILLING_SYSTEM=false

# Performance & Security (staging)
CORS_ORIGIN=https://staging.talk2go.online
RATE_LIMIT_WINDOW_MS=300000
RATE_LIMIT_MAX_REQUESTS=200

# Auto-migration
AUTO_MIGRATE=true
AUTO_DB_FIX=true

# Logging & Monitoring
LOG_LEVEL=info
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true
`;

const PRODUCTION_TEMPLATE = `# ============================================================================
# Production Environment Configuration
# Auto-generated by environment-manager.ts
# WARNING: Replace all CHANGE_ME values with actual production values!
# ============================================================================

# Core Settings
NODE_ENV=production
PORT=10000
CLIENT_URL=https://talk2go.online

# Database (PostgreSQL Production)
DATABASE_URL=CHANGE_ME_postgresql://prod_user:STRONG_PASSWORD@prod-db:5432/hotel_production

# Authentication (production - MUST CHANGE)
JWT_SECRET=CHANGE_ME_PRODUCTION_JWT_SECRET_MINIMUM_32_CHARACTERS
JWT_REFRESH_SECRET=CHANGE_ME_PRODUCTION_REFRESH_SECRET_DIFFERENT_FROM_JWT
STAFF_ACCOUNTS=CHANGE_ME_admin@talk2go.online:CHANGE_ME_VeryStrongPassword123

# OpenAI (production keys)
VITE_OPENAI_API_KEY=CHANGE_ME_sk-production-openai-key-with-billing
VITE_OPENAI_PROJECT_ID=CHANGE_ME_proj_production-project-id

# Vapi Voice Assistant (production)
VITE_VAPI_PUBLIC_KEY=CHANGE_ME_pk_production-vapi-public-key
VITE_VAPI_ASSISTANT_ID=CHANGE_ME_asst_production-assistant-id
VAPI_API_KEY=CHANGE_ME_production-vapi-api-key

# Multi-language Vapi Support (production)
VITE_VAPI_PUBLIC_KEY_VI=CHANGE_ME_pk_production-vietnamese-key
VITE_VAPI_ASSISTANT_ID_VI=CHANGE_ME_asst_production-vietnamese
VITE_VAPI_PUBLIC_KEY_FR=CHANGE_ME_pk_production-french-key
VITE_VAPI_ASSISTANT_ID_FR=CHANGE_ME_asst_production-french
VITE_VAPI_PUBLIC_KEY_ZH=CHANGE_ME_pk_production-chinese-key
VITE_VAPI_ASSISTANT_ID_ZH=CHANGE_ME_asst_production-chinese
VITE_VAPI_PUBLIC_KEY_RU=CHANGE_ME_pk_production-russian-key
VITE_VAPI_ASSISTANT_ID_RU=CHANGE_ME_asst_production-russian
VITE_VAPI_PUBLIC_KEY_KO=CHANGE_ME_pk_production-korean-key
VITE_VAPI_ASSISTANT_ID_KO=CHANGE_ME_asst_production-korean

# External APIs (production)
GOOGLE_PLACES_API_KEY=CHANGE_ME_production-google-places-key
GMAIL_APP_PASSWORD=CHANGE_ME_production-gmail-app-password
MAILJET_API_KEY=CHANGE_ME_production-mailjet-api-key
MAILJET_SECRET_KEY=CHANGE_ME_production-mailjet-secret
SUMMARY_EMAILS=CHANGE_ME_admin@talk2go.online,manager@talk2go.online

# SaaS Platform (production)
TALK2GO_DOMAIN=talk2go.online
SUBDOMAIN_SUFFIX=.talk2go.online
MINHON_TENANT_ID=minhon-production-tenant

# Feature Flags (production)
ENABLE_HOTEL_RESEARCH=true
ENABLE_DYNAMIC_ASSISTANT_CREATION=true
ENABLE_MULTI_LANGUAGE_SUPPORT=true
ENABLE_ANALYTICS_DASHBOARD=true
ENABLE_BILLING_SYSTEM=true

# Security & Performance (production)
CORS_ORIGIN=https://talk2go.online
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
SESSION_SECRET=CHANGE_ME_PRODUCTION_SESSION_SECRET_32_CHARS

# SSL/TLS (production)
SSL_CERT_PATH=/etc/ssl/certs/talk2go.online.crt
SSL_KEY_PATH=/etc/ssl/private/talk2go.online.key

# Auto-migration (production)
AUTO_MIGRATE=true
AUTO_DB_FIX=false

# Logging & Monitoring (production)
LOG_LEVEL=info
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true
SENTRY_DSN=CHANGE_ME_production-sentry-dsn

# Backup & Storage (production)
AWS_ACCESS_KEY_ID=CHANGE_ME_production-aws-access-key
AWS_SECRET_ACCESS_KEY=CHANGE_ME_production-aws-secret-key
AWS_REGION=us-east-1
BACKUP_S3_BUCKET=hotel-voice-assistant-production-backups
`;

// ======================== Environment Validation ========================

interface ValidationRule {
  name: string;
  required: boolean;
  pattern?: RegExp;
  minLength?: number;
  description: string;
}

const VALIDATION_RULES: Record<string, ValidationRule[]> = {
  common: [
    { name: 'NODE_ENV', required: true, description: 'Environment type' },
    {
      name: 'PORT',
      required: true,
      pattern: /^\d+$/,
      description: 'Port number',
    },
    {
      name: 'JWT_SECRET',
      required: true,
      minLength: 32,
      description: 'JWT secret key',
    },
    {
      name: 'DATABASE_URL',
      required: true,
      description: 'Database connection string',
    },
  ],
  production: [
    {
      name: 'CORS_ORIGIN',
      required: true,
      pattern: /^https:\/\//,
      description: 'CORS origin must use HTTPS',
    },
    {
      name: 'SSL_CERT_PATH',
      required: true,
      description: 'SSL certificate path',
    },
    {
      name: 'SSL_KEY_PATH',
      required: true,
      description: 'SSL private key path',
    },
    {
      name: 'SENTRY_DSN',
      required: true,
      description: 'Sentry DSN for error tracking',
    },
  ],
  apis: [
    {
      name: 'VITE_OPENAI_API_KEY',
      required: true,
      pattern: /^sk-/,
      description: 'OpenAI API key',
    },
    {
      name: 'VITE_VAPI_PUBLIC_KEY',
      required: true,
      description: 'Vapi public key',
    },
    {
      name: 'VITE_VAPI_ASSISTANT_ID',
      required: true,
      description: 'Vapi assistant ID',
    },
  ],
};

// ======================== Utility Functions ========================

function parseEnvFile(filePath: string): Record<string, string> {
  if (!existsSync(filePath)) {
    return {};
  }

  const content = readFileSync(filePath, 'utf-8');
  const env: Record<string, string> = {};

  content.split('\n').forEach(line => {
    line = line.trim();
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim();
      }
    }
  });

  return env;
}

function validateEnvironment(
  env: Record<string, string>,
  environment: string
): { valid: boolean; errors: string[]; warnings: string[] } {
  const errors: string[] = [];
  const warnings: string[] = [];

  // Get applicable rules
  const rules = [
    ...VALIDATION_RULES.common,
    ...VALIDATION_RULES.apis,
    ...(environment === 'production' ? VALIDATION_RULES.production : []),
  ];

  rules.forEach(rule => {
    const value = env[rule.name];

    if (rule.required && !value) {
      errors.push(
        `Missing required variable: ${rule.name} - ${rule.description}`
      );
      return;
    }

    if (value) {
      if (rule.pattern && !rule.pattern.test(value)) {
        errors.push(`Invalid format for ${rule.name}: ${rule.description}`);
      }

      if (rule.minLength && value.length < rule.minLength) {
        errors.push(
          `${rule.name} must be at least ${rule.minLength} characters long`
        );
      }

      if (value.includes('CHANGE_ME')) {
        if (environment === 'production') {
          errors.push(
            `Production variable ${rule.name} still contains CHANGE_ME placeholder`
          );
        } else {
          warnings.push(`Variable ${rule.name} contains CHANGE_ME placeholder`);
        }
      }
    }
  });

  return { valid: errors.length === 0, errors, warnings };
}

function generateSecureSecret(length: number = 32): string {
  const chars =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// ======================== Main Functions ========================

function generateEnvironment(
  environment: 'development' | 'staging' | 'production'
): void {
  console.log(`🔧 Generating ${environment} environment configuration...`);

  let template = '';
  switch (environment) {
    case 'development':
      template = DEVELOPMENT_TEMPLATE;
      break;
    case 'staging':
      template = STAGING_TEMPLATE;
      break;
    case 'production':
      template = PRODUCTION_TEMPLATE;
      // Generate secure secrets for production
      template = template.replace(
        /CHANGE_ME_PRODUCTION_JWT_SECRET_MINIMUM_32_CHARACTERS/,
        generateSecureSecret(64)
      );
      template = template.replace(
        /CHANGE_ME_PRODUCTION_REFRESH_SECRET_DIFFERENT_FROM_JWT/,
        generateSecureSecret(64)
      );
      template = template.replace(
        /CHANGE_ME_PRODUCTION_SESSION_SECRET_32_CHARS/,
        generateSecureSecret(48)
      );
      break;
  }

  const envPath = join(PROJECT_ROOT, `.env.${environment}`);
  writeFileSync(envPath, template);

  console.log(`✅ Generated ${environment} environment file: ${envPath}`);
  if (environment === 'production') {
    console.log(
      '⚠️  WARNING: Replace all CHANGE_ME values with actual production values!'
    );
  }
}

function validateEnvironmentFile(environment: string): void {
  console.log(`🔍 Validating ${environment} environment configuration...`);

  const envPath = join(PROJECT_ROOT, `.env.${environment}`);
  if (!existsSync(envPath)) {
    console.error(`❌ Environment file not found: ${envPath}`);
    process.exit(1);
  }

  const env = parseEnvFile(envPath);
  const validation = validateEnvironment(env, environment);

  if (validation.warnings.length > 0) {
    console.log('⚠️  Warnings:');
    validation.warnings.forEach(warning => console.log(`   - ${warning}`));
  }

  if (validation.errors.length > 0) {
    console.log('❌ Errors:');
    validation.errors.forEach(error => console.log(`   - ${error}`));
    process.exit(1);
  }

  console.log(`✅ ${environment} environment configuration is valid!`);
}

function copyEnvironment(source: string, target: string): void {
  console.log(`📋 Copying environment from ${source} to ${target}...`);

  const sourcePath = join(PROJECT_ROOT, `.env.${source}`);
  const targetPath = join(PROJECT_ROOT, `.env.${target}`);

  if (!existsSync(sourcePath)) {
    console.error(`❌ Source environment file not found: ${sourcePath}`);
    process.exit(1);
  }

  const content = readFileSync(sourcePath, 'utf-8');
  writeFileSync(targetPath, content);

  console.log(`✅ Copied ${source} environment to ${target}`);
}

function listEnvironments(): void {
  console.log('📋 Available environment files:');

  const environments = ['development', 'staging', 'production'];
  environments.forEach(env => {
    const envPath = join(PROJECT_ROOT, `.env.${env}`);
    const exists = existsSync(envPath);
    const status = exists ? '✅' : '❌';
    console.log(`   ${status} .env.${env}`);
  });
}

// ======================== CLI Interface ========================

function showHelp(): void {
  console.log(`
🔧 Environment Configuration Manager

Usage: tsx environment-manager.ts <command> [options]

Commands:
  generate <env>    Generate environment file (development|staging|production)
  validate <env>    Validate environment file
  copy <src> <dst>  Copy environment configuration
  list              List available environment files
  help              Show this help

Examples:
  tsx environment-manager.ts generate development
  tsx environment-manager.ts validate production
  tsx environment-manager.ts copy staging production
  tsx environment-manager.ts list
`);
}

// ======================== Main Execution ========================

function main(): void {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'generate':
      const env = args[1] as 'development' | 'staging' | 'production';
      if (!env || !['development', 'staging', 'production'].includes(env)) {
        console.error(
          '❌ Please specify environment: development, staging, or production'
        );
        process.exit(1);
      }
      generateEnvironment(env);
      break;

    case 'validate':
      const validateEnv = args[1];
      if (!validateEnv) {
        console.error('❌ Please specify environment to validate');
        process.exit(1);
      }
      validateEnvironmentFile(validateEnv);
      break;

    case 'copy':
      const source = args[1];
      const target = args[2];
      if (!source || !target) {
        console.error('❌ Please specify source and target environments');
        process.exit(1);
      }
      copyEnvironment(source, target);
      break;

    case 'list':
      listEnvironments();
      break;

    case 'help':
    default:
      showHelp();
      break;
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { copyEnvironment, generateEnvironment, validateEnvironmentFile };
