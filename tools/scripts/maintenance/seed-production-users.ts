#!/usr/bin/env tsx

import { Pool } from 'pg';
import bcrypt from 'bcrypt';

import { fileURLToPath } from 'url';

/**
 * Production User Seeding Script
 *
 * Creates default users for production deployment
 * Safe to run multiple times - won't duplicate users
 */

interface DefaultUser {
  username: string;
  password: string;
  email: string;
  role: string;
  firstName: string;
  lastName: string;
  displayName: string;
  tenantId: string;
}

async function seedProductionUsers(): Promise<{
  success: boolean;
  usersCreated: string[];
  error?: string;
}> {
  console.log('üë• Production User Seeding: Starting...');

  const DATABASE_URL = process.env.DATABASE_URL;

  if (!DATABASE_URL) {
    console.log(
      '‚ö†Ô∏è DATABASE_URL not found - skipping user seeding (probably local dev)'
    );
    return { success: true, usersCreated: [] };
  }

  // ‚úÖ FIXED: Skip PostgreSQL seeding for SQLite databases
  if (DATABASE_URL.startsWith('sqlite://')) {
    console.log(
      'üìÅ SQLite database detected - skipping PostgreSQL user seeding'
    );
    console.log(
      '‚ÑπÔ∏è SQLite databases should use local seeding methods (npm run db:seed)'
    );
    return;
  }

  // ‚úÖ IMPROVED: Only proceed with PostgreSQL seeding for actual PostgreSQL databases
  if (
    !DATABASE_URL.includes('postgres') &&
    !DATABASE_URL.includes('postgresql')
  ) {
    console.log(
      '‚ö†Ô∏è Database URL does not appear to be PostgreSQL - skipping user seeding'
    );
    console.log(
      'üîç DATABASE_URL pattern:',
      DATABASE_URL.substring(0, 20) + '...'
    );
    return;
  }

  console.log(
    'üêò PostgreSQL database detected - proceeding with user seeding...'
  );

  const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false },
  });

  const usersCreated: string[] = [];

  try {
    const client = await pool.connect();

    // 1. Check if tenant exists, create if not
    console.log('üè® Checking for default tenant...');

    const existingTenant = await client.query(`
      SELECT id FROM tenants WHERE id = 'mi-nhon-hotel' LIMIT 1
    `);

    let tenantId = 'mi-nhon-hotel';

    if (!existingTenant.rows || existingTenant.rows.length === 0) {
      console.log('üè® Creating default tenant: Mi Nhon Hotel');

      // Create tenant with settings
      await client.query(
        `
        INSERT INTO tenants (
          id, hotel_name, subdomain, subscription_plan, subscription_status,
          settings, features, created_at
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP
        ) ON CONFLICT (id) DO NOTHING
      `,
        [
          tenantId,
          'Mi Nhon Hotel',
          'minhonmuine',
          'premium',
          'active',
          JSON.stringify({
            timezone: 'Asia/Ho_Chi_Minh',
            defaultLanguage: 'vi',
            checkIn: '14:00',
            checkOut: '12:00',
            currency: 'VND',
            phoneFormat: '+84',
            notifications: {
              email: true,
              sms: false,
              voice: true,
            },
          }),
          JSON.stringify([
            'voice_assistant',
            'multi_language',
            'analytics',
            'staff_management',
            'request_tracking',
          ]),
        ]
      );

      console.log('‚úÖ Default tenant created');

      // Create hotel profile
      console.log('üè® Creating hotel profile...');
      await client.query(
        `
        INSERT INTO hotel_profiles (
          id, tenant_id, research_data, assistant_config, services_config, knowledge_base, system_prompt
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7
        ) ON CONFLICT (id) DO NOTHING
      `,
        [
          `${tenantId}-profile`,
          tenantId,
          JSON.stringify({
            location: 'Mui Ne, Vietnam',
            type: 'Beach Resort',
            rooms: 50,
            facilities: [
              'Restaurant',
              'Swimming Pool',
              'Spa',
              'Beach Access',
              'Room Service',
            ],
          }),
          JSON.stringify({
            language: 'vi',
            voice: 'female',
            personality: 'professional',
            greeting:
              'Xin ch√†o, t√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa kh√°ch s·∫°n Mi Nhon. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho qu√Ω kh√°ch?',
          }),
          JSON.stringify({
            enabled: [
              'room_service',
              'housekeeping',
              'concierge',
              'maintenance',
              'spa',
            ],
            hours: {
              room_service: '24/7',
              housekeeping: '07:00-22:00',
              concierge: '24/7',
              maintenance: '08:00-17:00',
              spa: '09:00-21:00',
            },
          }),
          'Mi Nhon Hotel l√† m·ªôt kh√°ch s·∫°n ngh·ªâ d∆∞·ª°ng b√™n b·ªù bi·ªÉn M≈©i N√©, c√°ch trung t√¢m Phan Thi·∫øt 15km. Kh√°ch s·∫°n c√≥ 50 ph√≤ng v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i, nh√† h√†ng ph·ª•c v·ª• ·∫©m th·ª±c Vi·ªát Nam v√† qu·ªëc t·∫ø, h·ªì b∆°i ngo√†i tr·ªùi v√† spa.',
          'B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa kh√°ch s·∫°n Mi Nhon. Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ kh√°ch h√†ng 24/7 v·ªõi m·ªçi y√™u c·∫ßu v·ªÅ d·ªãch v·ª• ph√≤ng, d·ªçn ph√≤ng, ƒë·∫∑t tour du l·ªãch v√† c√°c d·ªãch v·ª• kh√°c c·ªßa kh√°ch s·∫°n. H√£y lu√¥n th√¢n thi·ªán, chuy√™n nghi·ªáp v√† s·∫µn s√†ng gi√∫p ƒë·ª°.',
        ]
      );
      console.log('‚úÖ Hotel profile created');

      // Create sample requests
      console.log('üìã Creating sample requests...');
      const sampleRequests = [
        {
          room_number: '101',
          request_content: 'Y√™u c·∫ßu d·ªçn ph√≤ng',
          status: 'ƒê√£ ho√†n th√†nh',
          priority: 'normal',
          assigned_to: 'frontdesk',
        },
        {
          room_number: '205',
          request_content: 'Th√™m khƒÉn t·∫Øm',
          status: 'ƒêang th·ª±c hi·ªán',
          priority: 'high',
          assigned_to: 'housekeeping',
        },
        {
          room_number: '308',
          request_content: 'S·ª≠a ƒëi·ªÅu h√≤a',
          status: 'ƒê√£ ghi nh·∫≠n',
          priority: 'urgent',
          assigned_to: 'maintenance',
        },
      ];

      for (const req of (sampleRequests as any[])) {
        await client.query(
          `
          INSERT INTO request (
            tenant_id, room_number, request_content, status,
            priority, assigned_to, created_at
          ) VALUES (
            $1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP
          )
        `,
          [
            tenantId,
            req.room_number,
            req.request_content,
            req.status,
            req.priority,
            req.assigned_to,
          ]
        );
      }
      console.log('‚úÖ Sample requests created');
    } else {
      console.log('‚úÖ Default tenant already exists');

      // Check and update hotel profile
      const existingProfile = await client.query(
        `
        SELECT id FROM hotel_profiles WHERE tenant_id = $1 LIMIT 1
      `,
        [tenantId]
      );

      if (!existingProfile.rows?.length) {
        console.log('üè® Creating missing hotel profile...');
        await client.query(
          `
          INSERT INTO hotel_profiles (
            id, tenant_id, research_data, assistant_config, services_config, knowledge_base, system_prompt
          ) VALUES (
            $1, $2, $3, $4, $5, $6, $7
          )
        `,
          [
            `${tenantId}-profile`,
            tenantId,
            JSON.stringify({
              location: 'Mui Ne, Vietnam',
              type: 'Beach Resort',
              rooms: 50,
              facilities: [
                'Restaurant',
                'Swimming Pool',
                'Spa',
                'Beach Access',
                'Room Service',
              ],
            }),
            JSON.stringify({
              language: 'vi',
              voice: 'female',
              personality: 'professional',
              greeting:
                'Xin ch√†o, t√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa kh√°ch s·∫°n Mi Nhon. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho qu√Ω kh√°ch?',
            }),
            JSON.stringify({
              enabled: [
                'room_service',
                'housekeeping',
                'concierge',
                'maintenance',
                'spa',
              ],
              hours: {
                room_service: '24/7',
                housekeeping: '07:00-22:00',
                concierge: '24/7',
                maintenance: '08:00-17:00',
                spa: '09:00-21:00',
              },
            }),
            'Mi Nhon Hotel l√† m·ªôt kh√°ch s·∫°n ngh·ªâ d∆∞·ª°ng b√™n b·ªù bi·ªÉn M≈©i N√©, c√°ch trung t√¢m Phan Thi·∫øt 15km. Kh√°ch s·∫°n c√≥ 50 ph√≤ng v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i, nh√† h√†ng ph·ª•c v·ª• ·∫©m th·ª±c Vi·ªát Nam v√† qu·ªëc t·∫ø, h·ªì b∆°i ngo√†i tr·ªùi v√† spa.',
            'B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa kh√°ch s·∫°n Mi Nhon. Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ kh√°ch h√†ng 24/7 v·ªõi m·ªçi y√™u c·∫ßu v·ªÅ d·ªãch v·ª• ph√≤ng, d·ªçn ph√≤ng, ƒë·∫∑t tour du l·ªãch v√† c√°c d·ªãch v·ª• kh√°c c·ªßa kh√°ch s·∫°n. H√£y lu√¥n th√¢n thi·ªán, chuy√™n nghi·ªáp v√† s·∫µn s√†ng gi√∫p ƒë·ª°.',
          ]
        );
        console.log('‚úÖ Hotel profile created');
      } else {
        console.log('‚úÖ Hotel profile already exists');
      }

      // Check and create sample requests if none exist
      const existingRequests = await client.query(
        `
        SELECT COUNT(*) as count FROM request WHERE tenant_id = $1
      `,
        [tenantId]
      );

      if (existingRequests.rows[0].count === '0') {
        console.log('üìã Creating sample requests...');
        const sampleRequests = [
          {
            room_number: '101',
            request_content: 'Y√™u c·∫ßu d·ªçn ph√≤ng',
            status: 'ƒê√£ ho√†n th√†nh',
            priority: 'normal',
            assigned_to: 'frontdesk',
          },
          {
            room_number: '205',
            request_content: 'Th√™m khƒÉn t·∫Øm',
            status: 'ƒêang th·ª±c hi·ªán',
            priority: 'high',
            assigned_to: 'housekeeping',
          },
          {
            room_number: '308',
            request_content: 'S·ª≠a ƒëi·ªÅu h√≤a',
            status: 'ƒê√£ ghi nh·∫≠n',
            priority: 'urgent',
            assigned_to: 'maintenance',
          },
        ];

        for (const req of (sampleRequests as any[])) {
          await client.query(
            `
            INSERT INTO request (
              tenant_id, room_number, request_content, status,
              priority, assigned_to, created_at
            ) VALUES (
              $1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP
            )
          `,
            [
              tenantId,
              req.room_number,
              req.request_content,
              req.status,
              req.priority,
              req.assigned_to,
            ]
          );
        }
        console.log('‚úÖ Sample requests created');
      } else {
        console.log('‚úÖ Sample requests already exist');
      }
    }

    // 2. Define default users (let database auto-generate IDs)
    const defaultUsers = [
      {
        username: 'admin',
        password: 'admin123',
        email: 'admin@minhonhotel.com',
        role: 'super-admin',
        firstName: 'System',
        lastName: 'Administrator',
        displayName: 'System Administrator',
        tenantId,
        permissions: [
          'admin',
          'manage_users',
          'manage_settings',
          'view_analytics',
        ],
      },
      {
        username: 'manager',
        password: 'manager123',
        email: 'manager@minhonhotel.com',
        role: 'hotel-manager',
        firstName: 'Hotel',
        lastName: 'Manager',
        displayName: 'Hotel Manager',
        tenantId,
        permissions: ['manage_staff', 'view_analytics', 'manage_requests'],
      },
      {
        username: 'frontdesk',
        password: 'frontdesk123',
        email: 'frontdesk@minhonhotel.com',
        role: 'front-desk',
        firstName: 'Front',
        lastName: 'Desk',
        displayName: 'Front Desk Staff',
        tenantId,
        permissions: ['handle_requests', 'view_guests'],
      },
      {
        username: 'itmanager',
        password: 'itmanager123',
        email: 'it@minhonhotel.com',
        role: 'it-manager',
        firstName: 'IT',
        lastName: 'Manager',
        displayName: 'IT Manager',
        tenantId,
        permissions: ['manage_system', 'view_logs', 'manage_integrations'],
      },
    ];

    // STEP 0: Delete all existing users first
    console.log('üóëÔ∏è Cleaning up existing users...');
    for (const user of (defaultUsers as any[])) {
      await client.query(
        `
        DELETE FROM staff WHERE username = $1
      `,
        [user.username]
      );
      console.log(`   Deleted if exists: ${user.username}`);
    }

    // 3. Create users if they don't exist
    console.log('üë§ Creating default users...');

    for (const user of (defaultUsers as any[])) {
      // Hash password with consistent salt rounds
      const hashedPassword = await bcrypt.hash(user.password, 12); // Use 12 rounds consistently

      // Create user (let database auto-generate ID)
      await client.query(
        `
        INSERT INTO staff (
          tenant_id, username, password, first_name, last_name, 
          email, role, display_name, permissions, is_active, created_at
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, CURRENT_TIMESTAMP
        )
      `,
        [
          user.tenantId,
          user.username,
          hashedPassword,
          user.firstName,
          user.lastName,
          user.email,
          user.role,
          user.displayName,
          JSON.stringify(user.permissions), // Properly format permissions as JSON
          true,
        ]
      );

      usersCreated.push(user.username);
      console.log(`‚úÖ Created user: ${user.username} (${user.role})`);

      // Verify password hash
      const verifyHash = await bcrypt.compare(user.password, hashedPassword);
      console.log(
        `   Password verification: ${verifyHash ? '‚úÖ VALID' : '‚ùå INVALID'}`
      );
    }

    client.release();

    console.log('üéâ User seeding completed successfully!');
    console.log(`üìù Users created: ${usersCreated.join(', ')}`);
    console.log('');
    console.log('üîë Default login credentials:');
    console.log('  Admin: admin / admin123');
    console.log('  Manager: manager / manager123');
    console.log('  Front Desk: frontdesk / frontdesk123');
    console.log('  IT Manager: itmanager / itmanager123');

    return { success: true, usersCreated };
  } catch (error) {
    console.error('‚ùå User seeding failed:', error);
    return {
      success: false,
      usersCreated,
      error: error instanceof Error ? (error as any)?.message || String(error) : 'Unknown error',
    };
  } finally {
    await pool.end();
  }
}

// Export for use in other scripts
export { seedProductionUsers };

// Run if called directly (ES module compatible)
const __filename = fileURLToPath(import.meta.url);
const isMainModule =
  process.argv[1] === __filename ||
  process.argv[1]?.endsWith('seed-production-users.ts');

if (isMainModule) {
  seedProductionUsers()
    .then(result => {
      if (!result.success) {
        console.error('User seeding failed, but continuing...');
        // Don't exit with error code to allow deployment to continue
      }
    })
    .catch(error => {
      console.error('User seeding script error:', error);
      // Don't exit with error code to allow deployment to continue
    });
}
