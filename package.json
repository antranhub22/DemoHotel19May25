{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "engines": {
    "node": ">=18.20.0 <19.0.0",
    "npm": ">=10.0.0"
  },
  "scripts": {
    "build": "vite build",
    "build:production": "NODE_ENV=production npm run build",
    "preview": "vite preview --port 3000",
    "db:seed": "tsx apps/server/seed.ts",
    "db:migrate": "npx prisma migrate deploy",
    "db:studio": "npx prisma studio",
    "deploy": "npm run build:production && npm run db:migrate && npm run db:seed",
    "dev": "tsx watch apps/server/index.ts",
    "dev:client": "vite dev --port 3000",
    "start": "NODE_ENV=production tsx apps/server/index.ts",
    "test": "vitest",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:e2e": "playwright test",
    "test:e2e:install": "playwright install",
    "clean": "rm -rf dist node_modules/.vite",
    "clean:install": "npm run clean && npm install",
    "lint": "eslint apps/client/src apps/server packages --ext .ts,.tsx",
    "lint:fix": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "postinstall": "echo 'Post-install completed'",
    "validate:env": "node scripts/validate-env.cjs",
    "switch:env": "bash scripts/switch-env.sh",
    "env:local": "bash scripts/switch-env.sh local",
    "env:production": "bash scripts/switch-env.sh production",
    "docker:build": "docker build -t hotel-voice-assistant:latest .",
    "docker:up": "docker-compose up -d",
    "docker:up:prod": "docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:clean": "docker-compose down -v && docker system prune -f",
    "deploy:production": "npm run migrate:production && npm run migrate:auto && npm run build:production && npm run db:seed",
    "health:check": "curl -f http://localhost:10000/api/health || echo 'Health check failed'",
    "backup:create": "mkdir -p backups && pg_dump $DATABASE_URL > backups/backup-$(date +%Y%m%d-%H%M%S).sql 2>/dev/null || echo 'Backup failed - check DATABASE_URL'",
    "backup:restore": "test -n \"$BACKUP_FILE\" && psql $DATABASE_URL < $BACKUP_FILE || echo 'Set BACKUP_FILE environment variable'",
    "docs:organize": "node scripts/organize-docs.cjs",
    "docs:cleanup": "node scripts/cleanup-docs.cjs",
    "docs:update": "npm run docs:organize && npm run docs:cleanup",
    "docs:validate": "node scripts/validate-docs.cjs",
    "migrate:production": "npx prisma migrate deploy",
    "fix:tenants": "node scripts/fix-tenants-table.cjs",
    "migrate:auto": "tsx tools/scripts/maintenance/auto-migrate-on-deploy.ts"
  },
  "dependencies": {
    "@neondatabase/serverless": "^0.10.4",
    "@prisma/client": "^6.13.0",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@replit/vite-plugin-shadcn-theme-json": "^0.0.4",
    "@tailwindcss/typography": "^0.5.15",
    "@tanstack/react-query": "^5.75.5",
    "@types/bcrypt": "^5.0.2",
    "@types/better-sqlite3": "^7.6.13",
    "@types/cors": "^2.8.18",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/jwt-decode": "^2.2.1",
    "@types/node-fetch": "^2.6.12",
    "@types/nodemailer": "^6.4.17",
    "@types/pg": "^8.15.4",
    "@types/react-router-dom": "^5.3.3",
    "@vapi-ai/web": "^2.3.8",
    "@vitejs/plugin-react": "^4.4.1",
    "autoprefixer": "^10.4.21",
    "axios": "^1.10.0",
    "bcrypt": "^6.0.0",
    "better-sqlite3": "^11.10.0",
    "chalk": "^5.3.0",
    "cheerio": "1.0.0-rc.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^17.2.1",
    "elastic-apm-node": "^4.10.0",
    "express": "^4.21.2",
    "express-rate-limit": "^7.4.1",
    "helmet": "^8.1.0",
    "i18next": "^25.3.2",
    "jest-environment-jsdom": "^29.7.0",
    "jsonwebtoken": "^9.0.2",
    "jwt-decode": "^4.0.0",
    "lodash": "^4.17.21",
    "lucide-react": "^0.525.0",
    "nanoid": "^5.1.5",
    "node-cache": "^5.1.2",
    "node-fetch": "^3.3.2",
    "nodemailer": "^6.9.17",
    "openai": "^4.70.1",
    "pg": "^8.14.0",
    "postgres": "^3.4.5",
    "prisma": "^6.13.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.56.1",
    "react-hot-toast": "^2.5.1",
    "react-i18next": "^15.6.1",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.14.1",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "swiper": "^11.2.6",
    "tailwind-merge": "^2.5.4",
    "tailwindcss": "^3.4.14",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.20.3",
    "undici": "5.28.3",
    "vaul": "^1.1.0",
    "vite": "^6.0.0",
    "wouter": "^3.7.0",
    "ws": "^8.18.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@playwright/test": "^1.40.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/express": "4.17.21",
    "@types/jest": "^29.5.13",
    "@types/node": "^20.16.11",
    "@types/react": "^18.3.21",
    "@types/react-dom": "^18.3.7",
    "@types/supertest": "^6.0.3",
    "@types/ws": "^8.5.13",
    "@typescript-eslint/eslint-plugin": "^8.37.0",
    "@typescript-eslint/parser": "^8.37.0",
    "@vitest/ui": "^3.2.4",
    "babel-jest": "^29.7.0",
    "eslint": "^9.31.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-import-resolver-alias": "^1.1.2",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-prettier": "^5.5.3",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "husky": "^9.1.7",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-html-reporters": "^3.1.7",
    "jsdom": "^26.1.0",
    "lint-staged": "^15.5.2",
    "msw": "^2.4.12",
    "prettier": "^3.6.2",
    "supertest": "^7.1.3",
    "ts-jest": "^29.2.5",
    "typescript": "5.6.3",
    "vitest": "^3.2.4"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  },
  "governance": {
    "rules": {
      "ssot": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "architecture": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "security": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "quality": {
        "enabled": true,
        "severity": "warning",
        "autoFix": true
      },
      "multitenant": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "performance": {
        "enabled": true,
        "severity": "warning",
        "autoFix": false
      }
    },
    "reporting": {
      "format": "console",
      "outputFile": "governance-report.json",
      "includeWarnings": true,
      "verboseMode": false
    },
    "enforcement": {
      "blockCommitOnFailure": true,
      "blockDeployOnFailure": true,
      "allowWarnings": true
    },
    "exemptions": {
      "files": [
        "*.test.ts",
        "*.spec.ts",
        "tools/",
        "tests/"
      ],
      "rules": {
        "legacy": [
          "quality.documentation"
        ]
      }
    }
  }
}
