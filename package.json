{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "engines": {
    "node": ">=18.20.0 <19.0.0",
    "npm": ">=10.0.0"
  },
  "scripts": {
    "build": "vite build",
    "build:client": "cd apps/client && vite build --mode production",
    "build:server": "echo 'Server build skipped in production'",
    "build:production": "NODE_ENV=production npm run build",
    "build:analyze": "vite build --mode analyze",
    "preview": "vite preview --port 3000",
    "db:setup": "drizzle-kit push:pg",
    "db:seed": "tsx apps/server/seed.ts",
    "db:migrate": "drizzle-kit migrate",
    "db:studio": "drizzle-kit studio",
    "deploy": "npm run build:production && npm run db:setup && npm run db:seed",
    "dev": "tsx watch apps/server/index.ts",
    "dev:client": "vite dev --port 3000",
    "dev:server": "tsx watch apps/server/index.ts --port 10000",
    "start": "NODE_ENV=production tsx apps/server/index.ts",
    "start:production": "NODE_ENV=production PORT=10000 tsx apps/server/index.ts",
    "start:transpile-only": "NODE_ENV=development tsx apps/server/index.ts",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:contexts": "vitest run apps/client/src/context",
    "test:jest": "jest",
    "test:jest:watch": "jest --watch",
    "test:jest:coverage": "jest --coverage",
    "test:jest:voice": "jest tests/unit/voice",
    "test:jest:integration": "jest tests/integration",
    "test:jest:e2e": "jest tests/e2e",
    "test:jest:ci": "jest --ci --coverage --watchAll=false",
    "test:api-connectivity": "tsx tools/scripts/test-api-connectivity.ts",
    "test:integration:full": "tsx tools/scripts/maintenance/run-integration-tests.ts",
    "test:integration:mock": "tsx tools/scripts/maintenance/run-integration-tests.ts scenario mock",
    "test:integration:smoke": "tsx tools/scripts/maintenance/run-integration-tests.ts scenario smoke",
    "test:hotel-research": "tsx tests/test-hotel-research-flow.ts",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:headed": "playwright test --headed",
    "test:e2e:interface1": "playwright test interface1",
    "test:e2e:debug": "playwright test --debug",
    "test:e2e:install": "playwright install",
    "test:build": "npm run build && npm run test:run",
    "test:all": "npm run test:jest && npm run test:run && npm run test:e2e",
    "test:quick": "npm run test:jest:voice && npm run lint",
    "test:integration": "npm run test:jest:integration",
    "test:integration:watch": "npm run test:jest:integration -- --watch",
    "clean": "rm -rf dist node_modules/.vite",
    "clean:install": "npm run clean && npm install",
    "typecheck": "echo 'TypeScript check skipped in production'",
    "lint": "eslint apps/client/src apps/server packages --ext .ts,.tsx",
    "lint:fix": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "style:check": "npm run lint && npm run format:check",
    "style:fix": "npm run lint:fix && npm run format",
    "postinstall": "echo 'Post-install completed'",
    "build:safe": "vite build",
    "prepare": "echo 'Prepare step completed'",
    "validate:env": "node scripts/validate-env.cjs",
    "validate:env:structure": "node scripts/validate-env.cjs structure",
    "validate:env:format": "node scripts/validate-env.cjs format",
    "switch:env": "bash scripts/switch-env.sh",
    "env:development": "bash scripts/switch-env.sh development",
    "env:dev": "bash scripts/switch-env.sh development",
    "env:staging": "bash scripts/switch-env.sh staging",
    "env:production": "bash scripts/switch-env.sh production",
    "env:help": "node scripts/validate-env.cjs help",
    "docker:build": "docker build -t hotel-voice-assistant:latest .",
    "docker:build:dev": "docker build -f Dockerfile.development -t hotel-voice-assistant:dev .",
    "docker:up": "docker-compose up -d",
    "docker:up:dev": "docker-compose -f docker-compose.yml -f docker-compose.development.yml up -d",
    "docker:up:prod": "docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:clean": "docker-compose down -v && docker system prune -f",
    "env:generate": "tsx tools/scripts/deploy/environment-manager.ts generate",
    "env:validate": "tsx tools/scripts/deploy/environment-manager.ts validate",
    "env:copy": "tsx tools/scripts/deploy/environment-manager.ts copy",
    "env:list": "tsx tools/scripts/deploy/environment-manager.ts list",
    "deploy:staging": "bash tools/scripts/deploy/deploy-automation.sh staging",
    "deploy:staging:force": "bash tools/scripts/deploy/deploy-automation.sh staging --force",
    "deploy:staging:dry-run": "bash tools/scripts/deploy/deploy-automation.sh staging --dry-run",
    "deploy:production": "bash tools/scripts/deploy/deploy-automation.sh production",
    "deploy:production:force": "bash tools/scripts/deploy/deploy-automation.sh production --force",
    "deploy:production:dry-run": "bash tools/scripts/deploy/deploy-automation.sh production --dry-run",
    "deploy:rollback:staging": "bash tools/scripts/deploy/deploy-automation.sh staging --rollback",
    "deploy:rollback:production": "bash tools/scripts/deploy/deploy-automation.sh production --rollback",
    "health:check": "curl -f http://localhost:10000/api/health || echo 'Health check failed'",
    "health:status": "curl -f http://localhost:10000/api/status || echo 'Status check failed'",
    "monitoring:up": "docker-compose --profile monitoring up -d",
    "monitoring:down": "docker-compose --profile monitoring down",
    "backup:create": "mkdir -p backups && pg_dump $DATABASE_URL > backups/backup-$(date +%Y%m%d-%H%M%S).sql 2>/dev/null || echo 'Backup failed - check DATABASE_URL'",
    "backup:restore": "test -n \"$BACKUP_FILE\" && psql $DATABASE_URL < $BACKUP_FILE || echo 'Set BACKUP_FILE environment variable'",
    "ci:check": "npm run lint && npm run typecheck && npm run test:jest:ci",
    "ci:build": "npm run build:production && npm run docker:build",
    "lint:check": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts,.tsx,.js,.jsx",
    "check:imports": "./tools/scripts/validation/run-import-check.sh",
    "check:imports:quick": "./tools/scripts/validation/run-import-check.sh -m quick",
    "check:imports:full": "./tools/scripts/validation/run-import-check.sh -m full -d",
    "check:imports:ci": "./tools/scripts/validation/run-import-check.sh -m ci",
    "check:imports:frontend": "./tools/scripts/validation/run-import-check.sh -t apps/client",
    "check:imports:backend": "./tools/scripts/validation/run-import-check.sh -t apps/server",
    "check:imports:packages": "./tools/scripts/validation/run-import-check.sh -t packages",
    "check:imports:focus:circular": "./tools/scripts/validation/run-import-check.sh --focus circular",
    "check:imports:focus:exports": "./tools/scripts/validation/run-import-check.sh --focus exports",
    "fix:imports": "./tools/scripts/validation/run-import-check.sh --fix",
    "check:deps": "./tools/scripts/validation/run-dependency-check.sh",
    "check:deps:basic": "./tools/scripts/validation/run-dependency-check.sh -m basic",
    "check:deps:full": "./tools/scripts/validation/run-dependency-check.sh -m full -d",
    "check:deps:security": "./tools/scripts/validation/run-dependency-check.sh -m security",
    "check:deps:updates": "./tools/scripts/validation/run-dependency-check.sh -m updates",
    "check:deps:fix": "./tools/scripts/validation/run-dependency-check.sh --fix",
    "audit:deps": "./tools/scripts/validation/run-dependency-check.sh -m security -o security-report.json",
    "cleanup:deps": "./tools/scripts/validation/run-dependency-check.sh --fix",
    "migrate:eslint": "./tools/scripts/validation/migrate-eslint-import-rules.sh",
    "migrate:eslint:phase2": "./tools/scripts/validation/migrate-eslint-import-rules.sh -p 2",
    "migrate:eslint:phase3": "./tools/scripts/validation/migrate-eslint-import-rules.sh -p 3",
    "migrate:eslint:dry-run": "./tools/scripts/validation/migrate-eslint-import-rules.sh -d",
    "lint:imports": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "validate:full": "npm run lint:imports && npm run check:imports:quick && npm run check:deps",
    "validate:ci": "npm run lint:imports && npm run check:imports:ci && npm run check:deps:security",
    "sync:check": "./tools/scripts/validation/run-sync-checker.sh",
    "sync:check:quick": "./tools/scripts/validation/run-sync-checker.sh -m quick",
    "sync:check:deep": "./tools/scripts/validation/run-sync-checker.sh -m deep",
    "sync:check:save": "./tools/scripts/validation/run-sync-checker.sh -s",
    "sync:check:detailed": "./tools/scripts/validation/run-sync-checker.sh -d -s",
    "validate:master": "./tools/scripts/validation/run-sync-checker.sh -m full -d",
    "validate:complete": "./tools/scripts/validation/run-sync-checker.sh -m deep -s",
    "diag": "./tools/scripts/validation/quick-diagnosis.sh",
    "diag:quick": "./tools/scripts/validation/quick-diagnosis.sh",
    "diag:ts": "echo '=== TypeScript Check ===' && npx tsc --noEmit",
    "diag:deps": "echo '=== Dependency Check ===' && npx depcheck",
    "diag:circular": "echo '=== Circular Dependencies ===' && npx madge --circular src/",
    "diag:lint": "echo '=== ESLint Check ===' && npm run lint",
    "diag:git": "echo '=== Git Status ===' && git status --porcelain",
    "validate:final": "bash tools/scripts/validation/final-validation.sh",
    "validate:final:demo": "bash tools/scripts/validation/final-validation-demo.sh",
    "validate:business-ready": "bash tools/scripts/validation/final-validation.sh && echo '🎯 System ready for production deployment'",
    "🔔 MONITORING REMINDERS": "===============================",
    "check-monitoring": "node tools/scripts/validation/check-monitoring-status.cjs",
    "remind-monitoring": "echo '⚠️  REMINDER: Enhanced Logging & Metrics v2.0 is currently DISABLED' && echo '📋 To re-enable: npm run enable-monitoring' && echo '📖 Guide: MONITORING_RE_ENABLE_GUIDE.md'",
    "enable-monitoring": "node tools/scripts/validation/enable-monitoring.cjs",
    "status-monitoring": "echo '📊 Checking monitoring status...' && curl -s http://localhost:10000/api/monitoring/status || echo '⚠️  Monitoring not active'",
    "📈 LOAD TESTING": "===============================",
    "load-test": "node tools/scripts/load-testing/basic-load-test.js",
    "load-test:light": "TEST_DURATION=30 TEST_CONCURRENCY=3 npm run load-test",
    "load-test:moderate": "TEST_DURATION=120 TEST_CONCURRENCY=10 npm run load-test",
    "load-test:heavy": "TEST_DURATION=300 TEST_CONCURRENCY=25 npm run load-test",
    "load-test:stress": "TEST_DURATION=60 TEST_CONCURRENCY=50 npm run load-test",
    "load-test:local": "TEST_URL=http://localhost:10000 npm run load-test:light",
    "load-test:production": "TEST_URL=https://your-production-url.com npm run load-test:moderate",
    "🗄️ DATABASE OPTIMIZATION": "===============================",
    "db:optimize": "node tools/scripts/database/optimize-database.cjs",
    "db:analyze": "node tools/scripts/database/optimize-database.cjs --analysis-only",
    "db:indexes": "node tools/scripts/database/optimize-database.cjs --indexes-only",
    "db:vacuum": "node tools/scripts/database/optimize-database.cjs --vacuum-only",
    "db:health": "curl -s http://localhost:10000/api/admin/database/health | jq || echo '⚠️ Database health check failed'",
    "db:pool-status": "curl -s http://localhost:10000/api/admin/database/pool/status | jq || echo '⚠️ Pool status check failed'",
    "db:slow-queries": "curl -s http://localhost:10000/api/admin/database/slow-queries | jq || echo '⚠️ Slow queries check failed'",
    "📊 MONITORING DASHBOARD": "===============================",
    "dashboard:overview": "curl -s http://localhost:10000/api/admin/dashboard | jq || echo '⚠️ Dashboard overview failed'",
    "dashboard:metrics": "curl -s http://localhost:10000/api/admin/dashboard/metrics | jq || echo '⚠️ Dashboard metrics failed'",
    "dashboard:system": "curl -s http://localhost:10000/api/admin/dashboard/metrics/system | jq || echo '⚠️ System metrics failed'",
    "dashboard:database": "curl -s http://localhost:10000/api/admin/dashboard/metrics/database | jq || echo '⚠️ Database metrics failed'",
    "dashboard:application": "curl -s http://localhost:10000/api/admin/dashboard/metrics/application | jq || echo '⚠️ Application metrics failed'",
    "dashboard:business": "curl -s http://localhost:10000/api/admin/dashboard/metrics/business | jq || echo '⚠️ Business metrics failed'",
    "dashboard:alerts": "curl -s http://localhost:10000/api/admin/dashboard/alerts | jq || echo '⚠️ Dashboard alerts failed'",
    "dashboard:performance": "curl -s http://localhost:10000/api/admin/dashboard/performance | jq || echo '⚠️ Performance analytics failed'",
    "dashboard:test": "node tools/scripts/dashboard/test-dashboard.cjs",
    "🌐 API GATEWAY": "===============================",
    "gateway:overview": "curl -s http://localhost:10000/api/admin/api-gateway | jq || echo '⚠️ Gateway overview failed'",
    "gateway:metrics": "curl -s http://localhost:10000/api/admin/api-gateway/metrics | jq || echo '⚠️ Gateway metrics failed'",
    "gateway:rate-limits": "curl -s http://localhost:10000/api/admin/api-gateway/rate-limits | jq || echo '⚠️ Rate limits failed'",
    "gateway:routes": "curl -s http://localhost:10000/api/admin/api-gateway/routes | jq || echo '⚠️ Gateway routes failed'",
    "gateway:cache": "curl -s http://localhost:10000/api/admin/api-gateway/cache | jq || echo '⚠️ Gateway cache failed'",
    "gateway:security": "curl -s http://localhost:10000/api/admin/api-gateway/security | jq || echo '⚠️ Gateway security failed'",
    "gateway:config": "curl -s http://localhost:10000/api/admin/api-gateway/config | jq || echo '⚠️ Gateway config failed'",
    "gateway:diagnostics": "curl -s http://localhost:10000/api/admin/api-gateway/diagnostics | jq || echo '⚠️ Gateway diagnostics failed'",
    "gateway:test": "node tools/scripts/gateway/test-gateway.cjs",
    "🏛️ GOVERNANCE RULES": "===============================",
    "governance:validate": "node tools/governance/governance-validator.js",
    "governance:validate:json": "node tools/governance/governance-validator.js --json",
    "governance:validate:verbose": "node tools/governance/governance-validator.js --verbose",
    "governance:validate:ssot": "node tools/governance/governance-validator.js --rules=ssot",
    "governance:validate:security": "node tools/governance/governance-validator.js --rules=security",
    "governance:validate:architecture": "node tools/governance/governance-validator.js --rules=architecture",
    "governance:validate:quality": "node tools/governance/governance-validator.js --rules=quality",
    "governance:validate:multitenant": "node tools/governance/governance-validator.js --rules=multitenant",
    "governance:validate:performance": "node tools/governance/governance-validator.js --rules=performance",
    "governance:report": "node tools/governance/governance-validator.js --json --output=governance-report.json",
    "governance:report:html": "node tools/governance/governance-validator.js --json --output=governance-report.json && node tools/governance/generate-html-report.js",
    "governance:check": "npm run governance:validate && echo '✅ Governance validation passed'",
    "governance:ci": "node tools/governance/governance-validator.js --json --output=governance-report.json --rules=ssot,security,architecture",
    "governance:fix": "node tools/governance/governance-validator.js --fix",
    "pre-commit:governance": "npm run governance:validate:security && npm run governance:validate:ssot",
    "🔧 SECURITY FIX": "===============================",
    "security:fix": "node tools/governance/fix-security-violations.js",
    "security:fix:dry-run": "node tools/governance/fix-security-violations.js --dry-run"
  },
  "dependencies": {
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@replit/vite-plugin-shadcn-theme-json": "^0.0.4",
    "@tanstack/react-query": "^5.75.5",
    "@types/bcrypt": "^5.0.2",
    "@types/better-sqlite3": "^7.6.13",
    "@types/cors": "^2.8.18",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/jwt-decode": "^2.2.1",
    "@types/node-fetch": "^2.6.12",
    "@types/nodemailer": "^6.4.17",
    "@types/pg": "^8.15.4",
    "@types/react-router-dom": "^5.3.3",
    "@vapi-ai/web": "^2.3.8",
    "@vitejs/plugin-react": "^4.4.1",
    "axios": "^1.10.0",
    "bcrypt": "^6.0.0",
    "better-sqlite3": "^11.10.0",
    "cheerio": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "drizzle-orm": "^0.31.4",
    "express": "^5.0.1",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "i18next": "^25.3.2",
    "jest-environment-jsdom": "^29.7.0",
    "jsonwebtoken": "^9.0.2",
    "jwt-decode": "^4.0.0",
    "lodash": "^4.17.21",
    "lucide-react": "^0.525.0",
    "node-cache": "^5.1.2",
    "node-fetch": "^3.3.2",
    "nodemailer": "^6.9.17",
    "pg": "^8.14.0",
    "postgres": "^3.4.5",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.56.1",
    "react-hot-toast": "^2.5.1",
    "react-i18next": "^15.6.1",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.14.1",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "swiper": "^11.2.6",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.20.3",
    "vaul": "^1.1.0",
    "vite": "^6.0.0",
    "wouter": "^3.7.0",
    "ws": "^8.18.2",
    "zod": "^3.23.8",
    "autoprefixer": "^10.4.21",
    "tailwindcss": "^3.4.14",
    "@tailwindcss/typography": "^0.5.15",
    "dotenv": "^17.2.1"
  },
  "devDependencies": {
    "@playwright/test": "^1.40.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/express": "4.17.21",
    "@types/jest": "^29.5.13",
    "@types/node": "^20.16.11",
    "@types/react": "^18.3.21",
    "@types/react-dom": "^18.3.7",
    "@types/supertest": "^6.0.3",
    "@types/ws": "^8.5.13",
    "@typescript-eslint/eslint-plugin": "^8.37.0",
    "@typescript-eslint/parser": "^8.37.0",
    "@vitest/ui": "^3.2.4",
    "babel-jest": "^29.7.0",
    "drizzle-kit": "^0.31.4",
    "eslint": "^9.31.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-import-resolver-alias": "^1.1.2",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-prettier": "^5.5.3",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "husky": "^9.1.7",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-html-reporters": "^3.1.7",
    "jsdom": "^26.1.0",
    "lint-staged": "^15.5.2",
    "msw": "^2.4.12",
    "prettier": "^3.6.2",
    "supertest": "^7.1.3",
    "ts-jest": "^29.2.5",
    "typescript": "5.6.3",
    "vitest": "^3.2.4"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ],
    "apps/server/routes/*.ts": [
      "npm run governance:validate:ssot"
    ],
    "packages/shared/db/schema.ts": [
      "npm run governance:validate:ssot",
      "npm run governance:validate:multitenant"
    ],
    "apps/client/src/components/**/*.{ts,tsx}": [
      "npm run governance:validate:architecture"
    ]
  },
  "governance": {
    "rules": {
      "ssot": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "architecture": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "security": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "quality": {
        "enabled": true,
        "severity": "warning",
        "autoFix": true
      },
      "multitenant": {
        "enabled": true,
        "severity": "error",
        "autoFix": false
      },
      "performance": {
        "enabled": true,
        "severity": "warning",
        "autoFix": false
      }
    },
    "reporting": {
      "format": "console",
      "outputFile": "governance-report.json",
      "includeWarnings": true,
      "verboseMode": false
    },
    "enforcement": {
      "blockCommitOnFailure": true,
      "blockDeployOnFailure": true,
      "allowWarnings": true
    },
    "exemptions": {
      "files": [
        "*.test.ts",
        "*.spec.ts",
        "tools/",
        "tests/"
      ],
      "rules": {
        "legacy": [
          "quality.documentation"
        ]
      }
    }
  }
}
